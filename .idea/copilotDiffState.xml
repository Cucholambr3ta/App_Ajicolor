<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;&#10;    // API de WindowSizeClass para responsive&#10;    implementation(&quot;androidx.compose.material3:material3-window-size-class:1.3.0&quot;)&#10;&#10;    // Coroutines para StateFlow en ViewModel&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;)&#10;&#10;    // Navigation Compose&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;&#10;    // Lifecycle ViewModel para Compose (función viewModel())&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // Opcional: Adaptive (déjalo si lo usarás)&#10;    implementation(&quot;androidx.compose.material3.adaptive:adaptive:1.0.0-alpha06&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;&#10;    // API de WindowSizeClass para responsive&#10;    implementation(&quot;androidx.compose.material3:material3-window-size-class:1.3.0&quot;)&#10;&#10;    // Coroutines para StateFlow en ViewModel&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;)&#10;&#10;    // Navigation Compose&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;&#10;    // Lifecycle ViewModel para Compose (función viewModel())&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // Opcional: Adaptive (déjalo si lo usarás)&#10;    implementation(&quot;androidx.compose.material3.adaptive:adaptive:1.0.0-alpha06&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/MainActivity.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.apppolera_ecommerce_grupo4.ui.theme.AppPolera_ecommerce_Grupo4Theme&#10;import com.example.apppolera_ecommerce_grupo4.navigation.AppNavigation&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AppPolera_ecommerce_Grupo4Theme {&#10;                AppNavigation()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AppPreview() {&#10;    AppPolera_ecommerce_Grupo4Theme {&#10;        AppNavigation()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.apppolera_ecommerce_grupo4.ui.theme.AppPolera_ecommerce_Grupo4Theme&#10;import com.example.apppolera_ecommerce_grupo4.navigation.AppNavigation&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AppPolera_ecommerce_Grupo4Theme {&#10;                AppNavigation()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AppPreview() {&#10;    AppPolera_ecommerce_Grupo4Theme {&#10;        AppNavigation()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/HomeScreenCompact.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/HomeScreenCompact.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import com.example.apppolera_ecommerce_grupo4.R&#10;&#10;@Composable&#10;fun HomeScreenCompact() { // Implementación de la pantalla de inicio para pantallas compactas&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(text = &quot;Mi App Kotlin&quot;) }&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        // Contenido de la pantalla de inicio&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Bienvenido a Poleras E-commerce&quot;,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                style = MaterialTheme.typography.titleLarge&#10;            )&#10;            Button(onClick = { /* acción futura */ }) {&#10;                Text(text = &quot;Explorar Nuestros Productos&quot;)&#10;            }&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo),&#10;                contentDescription = &quot;Logo App&quot;,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(150.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import com.example.apppolera_ecommerce_grupo4.R&#10;&#10;@Composable&#10;fun HomeScreenCompact() { // Implementación de la pantalla de inicio para pantallas compactas&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(text = &quot;Mi App Kotlin&quot;) }&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        // Contenido de la pantalla de inicio&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Bienvenido a Poleras E-commerce&quot;,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                style = MaterialTheme.typography.titleLarge&#10;            )&#10;            Button(onClick = { /* acción futura */ }) {&#10;                Text(text = &quot;Explorar Nuestros Productos&quot;)&#10;            }&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo),&#10;                contentDescription = &quot;Logo App&quot;,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(150.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResgitroScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResgitroScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Campo Nombre&#10;        OutlinedTextField(&#10;            value = estado.nombre,&#10;            onValueChange = viewModel::actualizaNombre,&#10;            label = { Text(&quot;Nombre&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.nombre != null,&#10;            supportingText = { estado.errores.nombre?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Correo&#10;        OutlinedTextField(&#10;            value = estado.correo,&#10;            onValueChange = viewModel::actualizaCorreo,&#10;            label = { Text(&quot;Correo electrónico&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.correo != null,&#10;            supportingText = { estado.errores.correo?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Clave&#10;        OutlinedTextField(&#10;            value = estado.clave,&#10;            onValueChange = viewModel::actualizaClave,&#10;            label = { Text(&quot;Clave&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            isError = estado.errores.clave != null,&#10;            supportingText = { estado.errores.clave?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Dirección&#10;        OutlinedTextField(&#10;            value = estado.direccion,&#10;            onValueChange = viewModel::actualizaDireccion,&#10;            label = { Text(&quot;Dirección&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.direccion != null,&#10;            supportingText = { estado.errores.direccion?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Checkbox términos&#10;        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {&#10;            Checkbox(&#10;                checked = estado.aceptaTerminos,&#10;                onCheckedChange = viewModel::actualizaAceptaTerminos&#10;            )&#10;            Text(&quot;Acepto los términos y condiciones&quot;)&#10;        }&#10;        if (estado.errores.aceptaTerminos != null) {&#10;            Text(estado.errores.aceptaTerminos!!, color = Color.Red)&#10;        }&#10;&#10;        // Botón registrar&#10;        Button(&#10;            onClick = {&#10;                if (viewModel.validarFormulario()) {&#10;                    navController.navigate(Routes.RESUMEN)&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Registrarse&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Routes&#10;&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;    viewModel: UsuarioViewModel&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Campo Nombre&#10;        OutlinedTextField(&#10;            value = estado.nombre,&#10;            onValueChange = viewModel::actualizaNombre,&#10;            label = { Text(&quot;Nombre&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.nombre != null,&#10;            supportingText = { estado.errores.nombre?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Correo&#10;        OutlinedTextField(&#10;            value = estado.correo,&#10;            onValueChange = viewModel::actualizaCorreo,&#10;            label = { Text(&quot;Correo electrónico&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.correo != null,&#10;            supportingText = { estado.errores.correo?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Clave&#10;        OutlinedTextField(&#10;            value = estado.clave,&#10;            onValueChange = viewModel::actualizaClave,&#10;            label = { Text(&quot;Clave&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            isError = estado.errores.clave != null,&#10;            supportingText = { estado.errores.clave?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Dirección&#10;        OutlinedTextField(&#10;            value = estado.direccion,&#10;            onValueChange = viewModel::actualizaDireccion,&#10;            label = { Text(&quot;Dirección&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.direccion != null,&#10;            supportingText = { estado.errores.direccion?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Checkbox términos&#10;        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {&#10;            Checkbox(&#10;                checked = estado.aceptaTerminos,&#10;                onCheckedChange = viewModel::actualizaAceptaTerminos&#10;            )&#10;            Text(&quot;Acepto los términos y condiciones&quot;)&#10;        }&#10;        if (estado.errores.aceptaTerminos != null) {&#10;            Text(estado.errores.aceptaTerminos!!, color = Color.Red)&#10;        }&#10;&#10;        // Botón registrar&#10;        Button(&#10;            onClick = {&#10;                if (viewModel.validarFormulario()) {&#10;                    navController.navigate(Routes.RESUMEN)&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Registrarse&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResumenScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResumenScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@Composable&#10;fun ResumenScreen(&#10;    navController: NavController,&#10;    vm: UsuarioViewModel&#10;) {&#10;    val estado by vm.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Text(&quot;Resumen de registro&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Text(&quot;Nombre: ${estado.nombre}&quot;)&#10;        Text(&quot;Correo: ${estado.correo}&quot;)&#10;        Text(&quot;Dirección: ${estado.direccion}&quot;)&#10;        Text(&quot;Contraseña: ${&quot;*&quot;.repeat(estado.clave.length)}&quot;)&#10;        Text(&quot;Aceptó términos: ${if (estado.aceptaTerminos) &quot;Sí&quot; else &quot;No&quot;}&quot;)&#10;&#10;        Button(onClick = { /* TODO: continuar flujo o navController.popBackStack() */ }) {&#10;            Text(&quot;Continuar&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@Composable&#10;fun ResumenScreen(&#10;    navController: NavController,&#10;    vm: UsuarioViewModel&#10;) {&#10;    val estado by vm.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Text(&quot;Resumen de registro&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Text(&quot;Nombre: ${estado.nombre}&quot;)&#10;        Text(&quot;Correo: ${estado.correo}&quot;)&#10;        Text(&quot;Dirección: ${estado.direccion}&quot;)&#10;        Text(&quot;Contraseña: ${&quot;*&quot;.repeat(estado.clave.length)}&quot;)&#10;        Text(&quot;Aceptó términos: ${if (estado.aceptaTerminos) &quot;Sí&quot; else &quot;No&quot;}&quot;)&#10;&#10;        Button(onClick = { /* TODO: continuar flujo o navController.popBackStack() */ }) {&#10;            Text(&quot;Continuar&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/ErroresUsuario.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/ErroresUsuario.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;typealias ErroresUsuario = UsuarioErrores&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;typealias ErroresUsuario = UsuarioErrores&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/UsuarioErrores.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/UsuarioErrores.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;/**&#10; * Errores de validación por campo para el formulario de Usuario.&#10; * Usa null o cadena vacía cuando no hay error.&#10; */&#10;data class UsuarioErrores(&#10;    val nombre: String? = null,&#10;    val correo: String? = null,&#10;    val clave: String? = null,&#10;    val direccion: String? = null,&#10;    val aceptaTerminos: String? = null&#10;) {&#10;    val hayErrores: Boolean&#10;        get() = listOf(nombre, correo, clave, direccion, aceptaTerminos).any { !it.isNullOrBlank() }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;/**&#10; * Errores de validación por campo para el formulario de Usuario.&#10; * Usa null o cadena vacía cuando no hay error.&#10; */&#10;data class UsuarioErrores(&#10;    val nombre: String? = null,&#10;    val correo: String? = null,&#10;    val clave: String? = null,&#10;    val direccion: String? = null,&#10;    val aceptaTerminos: String? = null&#10;) {&#10;    val hayErrores: Boolean&#10;        get() = listOf(nombre, correo, clave, direccion, aceptaTerminos).any { !it.isNullOrBlank() }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/UsuarioUIState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/UsuarioUIState.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;/**&#10; * Clase que representa el estado de la interfaz de usuario para un Usuario.&#10; * Se usa en ViewModels para manejar formularios de registro, login o perfil.&#10; */&#10;data class UsuarioUiState(&#10;    val nombre: String = &quot;&quot;, // Nombre del usuario&#10;    val apellido: String = &quot;&quot;, // Apellido del usuario&#10;    val correo: String = &quot;&quot;, // Correo electrónico del usuario&#10;    val clave: String = &quot;&quot;,  // Clave o contraseña del usuario&#10;    val direccion: String = &quot;&quot;, // Dirección del usuario&#10;    val aceptaTerminos: Boolean = false,  // Confirmación de términos y condiciones&#10;    val errores: UsuarioErrores = UsuarioErrores() // Errores de validación del formulario&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;/**&#10; * Clase que representa el estado de la interfaz de usuario para un Usuario.&#10; * Se usa en ViewModels para manejar formularios de registro, login o perfil.&#10; */&#10;data class UsuarioUiState(&#10;    val nombre: String = &quot;&quot;, // Nombre del usuario&#10;    val apellido: String = &quot;&quot;, // Apellido del usuario&#10;    val correo: String = &quot;&quot;, // Correo electrónico del usuario&#10;    val clave: String = &quot;&quot;,  // Clave o contraseña del usuario&#10;    val direccion: String = &quot;&quot;, // Dirección del usuario&#10;    val aceptaTerminos: Boolean = false,  // Confirmación de términos y condiciones&#10;    val errores: UsuarioErrores = UsuarioErrores() // Errores de validación del formulario&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Wrapper de compatibilidad: usa el nombre correcto del tema.&#10;@Deprecated(&quot;Usa AppPolera_ecommerce_Grupo4Theme en su lugar&quot;)&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(content: @Composable () -&gt; Unit) {&#10;    AppPolera_ecommerce_Grupo4Theme(content = content)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Wrapper de compatibilidad: usa el nombre correcto del tema.&#10;@Deprecated(&quot;Usa AppPolera_ecommerce_Grupo4Theme en su lugar&quot;)&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(content: @Composable () -&gt; Unit) {&#10;    AppPolera_ecommerce_Grupo4Theme(content = content)&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolera_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolera_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/utils/WindowSizeUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/utils/WindowSizeUtils.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.utils&#10;&#10;import android.app.Activity&#10;import androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi&#10;import androidx.compose.material3.windowsizeclass.WindowSizeClass&#10;import androidx.compose.material3.windowsizeclass.calculateWindowSizeClass&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)&#10;@Composable&#10;fun getWindowSizeClass(): WindowSizeClass {&#10;    val activity = LocalContext.current as Activity&#10;    return calculateWindowSizeClass(activity)&#10;}" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.utils&#13;&#10;&#13;&#10;import android.app.Activity&#13;&#10;import androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi&#13;&#10;import androidx.compose.material3.windowsizeclass.WindowSizeClass&#13;&#10;import androidx.compose.material3.windowsizeclass.calculateWindowSizeClass&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)&#10;@Composable&#10;fun getWindowSizeClass(): WindowSizeClass {&#10;    val activity = LocalContext.current as Activity&#10;    return calculateWindowSizeClass(activity)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/viewmodel/UsuarioViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/viewmodel/UsuarioViewModel.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.UsuarioUiState&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.ErroresUsuario&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.update&#10;&#10;class UsuarioViewModel : ViewModel() {&#10;&#10;    // Estado privado mutable&#10;    private val _estado = MutableStateFlow(UsuarioUiState())&#10;    // Estado público inmutable para la UI&#10;    val estado: StateFlow&lt;UsuarioUiState&gt; = _estado&#10;&#10;    // Funciones de actualización de campos&#10;    fun actualizaNombre(valor: String) {&#10;        _estado.update { it.copy(nombre = valor, errores = it.errores.copy(nombre = null)) }&#10;    }&#10;&#10;    fun actualizaCorreo(valor: String) {&#10;        _estado.update { it.copy(correo = valor, errores = it.errores.copy(correo = null)) }&#10;    }&#10;&#10;    fun actualizaClave(valor: String) {&#10;        _estado.update { it.copy(clave = valor, errores = it.errores.copy(clave = null)) }&#10;    }&#10;&#10;    fun actualizaDireccion(valor: String) {&#10;        _estado.update { it.copy(direccion = valor, errores = it.errores.copy(direccion = null)) }&#10;    }&#10;&#10;    fun actualizaAceptaTerminos(valor: Boolean) {&#10;        _estado.update { it.copy(aceptaTerminos = valor, errores = it.errores.copy(aceptaTerminos = null)) }&#10;    }&#10;&#10;    // Validación del formulario&#10;    fun validarFormulario(): Boolean {&#10;        val estadoActual = _estado.value&#10;        var valido = true&#10;        var errores = ErroresUsuario()&#10;&#10;        if (estadoActual.nombre.isBlank()) {&#10;            errores = errores.copy(nombre = &quot;El nombre es obligatorio&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.correo.isBlank() || !estadoActual.correo.contains(&quot;@&quot;)) {&#10;            errores = errores.copy(correo = &quot;Correo inválido&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.clave.length &lt; 6) {&#10;            errores = errores.copy(clave = &quot;La clave debe tener al menos 6 caracteres&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.direccion.isBlank()) {&#10;            errores = errores.copy(direccion = &quot;La dirección es obligatoria&quot;)&#10;            valido = false&#10;        }&#10;        if (!estadoActual.aceptaTerminos) {&#10;            errores = errores.copy(aceptaTerminos = &quot;Debes aceptar los términos&quot;)&#10;            valido = false&#10;        }&#10;&#10;        // Actualizamos el estado con los errores&#10;        _estado.update { it.copy(errores = errores) }&#10;&#10;        return valido&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.UsuarioUiState&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.ErroresUsuario&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.update&#10;&#10;class UsuarioViewModel : ViewModel() {&#10;&#10;    // Estado privado mutable&#10;    private val _estado = MutableStateFlow(UsuarioUiState())&#10;    // Estado público inmutable para la UI&#10;    val estado: StateFlow&lt;UsuarioUiState&gt; = _estado&#10;&#10;    // Funciones de actualización de campos&#10;    fun actualizaNombre(valor: String) {&#10;        _estado.update { it.copy(nombre = valor, errores = it.errores.copy(nombre = null)) }&#10;    }&#10;&#10;    fun actualizaCorreo(valor: String) {&#10;        _estado.update { it.copy(correo = valor, errores = it.errores.copy(correo = null)) }&#10;    }&#10;&#10;    fun actualizaClave(valor: String) {&#10;        _estado.update { it.copy(clave = valor, errores = it.errores.copy(clave = null)) }&#10;    }&#10;&#10;    fun actualizaDireccion(valor: String) {&#10;        _estado.update { it.copy(direccion = valor, errores = it.errores.copy(direccion = null)) }&#10;    }&#10;&#10;    fun actualizaAceptaTerminos(valor: Boolean) {&#10;        _estado.update { it.copy(aceptaTerminos = valor, errores = it.errores.copy(aceptaTerminos = null)) }&#10;    }&#10;&#10;    // Validación del formulario&#10;    fun validarFormulario(): Boolean {&#10;        val estadoActual = _estado.value&#10;        var valido = true&#10;        var errores = ErroresUsuario()&#10;&#10;        if (estadoActual.nombre.isBlank()) {&#10;            errores = errores.copy(nombre = &quot;El nombre es obligatorio&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.correo.isBlank() || !estadoActual.correo.contains(&quot;@&quot;)) {&#10;            errores = errores.copy(correo = &quot;Correo inválido&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.clave.length &lt; 6) {&#10;            errores = errores.copy(clave = &quot;La clave debe tener al menos 6 caracteres&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.direccion.isBlank()) {&#10;            errores = errores.copy(direccion = &quot;La dirección es obligatoria&quot;)&#10;            valido = false&#10;        }&#10;        if (!estadoActual.aceptaTerminos) {&#10;            errores = errores.copy(aceptaTerminos = &quot;Debes aceptar los términos&quot;)&#10;            valido = false&#10;        }&#10;&#10;        // Actualizamos el estado con los errores&#10;        _estado.update { it.copy(errores = errores) }&#10;&#10;        return valido&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val Purple80 = Color(0xFFD0BCFF)&#10;val PurpleGrey80 = Color(0xFFCCC2DC)&#10;val Pink80 = Color(0xFFEFB8C8)&#10;&#10;val Purple40 = Color(0xFF6650a4)&#10;val PurpleGrey40 = Color(0xFF625b71)&#10;val Pink40 = Color(0xFF7D5260)" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;&#13;&#10;val Purple80 = Color(0xFFD0BCFF)&#13;&#10;val PurpleGrey80 = Color(0xFFCCC2DC)&#13;&#10;val Pink80 = Color(0xFFEFB8C8)&#13;&#10;&#13;&#10;val Purple40 = Color(0xFF6650a4)&#13;&#10;val PurpleGrey40 = Color(0xFF625b71)&#13;&#10;val Pink40 = Color(0xFF7D5260)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Type.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    /* Other default text styles to override&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    */&#10;)" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.material3.Typography&#13;&#10;import androidx.compose.ui.text.TextStyle&#13;&#10;import androidx.compose.ui.text.font.FontFamily&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;&#13;&#10;// Set of Material typography styles to start with&#13;&#10;val Typography = Typography(&#13;&#10;    bodyLarge = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Normal,&#13;&#10;        fontSize = 16.sp,&#13;&#10;        lineHeight = 24.sp,&#13;&#10;        letterSpacing = 0.5.sp&#13;&#10;    )&#13;&#10;    /* Other default text styles to override&#13;&#10;    titleLarge = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Normal,&#13;&#10;        fontSize = 22.sp,&#13;&#10;        lineHeight = 28.sp,&#13;&#10;        letterSpacing = 0.sp&#13;&#10;    ),&#13;&#10;    labelSmall = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Medium,&#13;&#10;        fontSize = 11.sp,&#13;&#10;        lineHeight = 16.sp,&#13;&#10;        letterSpacing = 0.5.sp&#13;&#10;    )&#13;&#10;    */&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;AppPolera_ecommerce_Grupo4&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;AppPolera_ecommerce_Grupo4&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.AppPolera_ecommerce_Grupo4&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.AppPolera_ecommerce_Grupo4&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/apppolerca_ecommerce_grupo4/ExampleUnitTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/apppolerca_ecommerce_grupo4/ExampleUnitTest.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import org.junit.Test&#10;import org.junit.Assert.*&#10;&#10;class ExampleUnitTest {&#10;    @Test&#10;    fun addition_isCorrect() {&#10;        assertEquals(4, 2 + 2)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import org.junit.Test&#10;import org.junit.Assert.*&#10;&#10;class ExampleUnitTest {&#10;    @Test&#10;    fun addition_isCorrect() {&#10;        assertEquals(4, 2 + 2)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.13.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-compose-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-compose-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-compose-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-compose-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-compose-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-compose-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-compose-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.13.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-compose-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-compose-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-compose-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-compose-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-compose-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-compose-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-compose-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;AppPolera_ecommerce_Grupo4&quot;&#10;include(&quot;:app&quot;)&#10;" />
              <option name="updatedContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;AppPolera_ecommerce_Grupo4&quot;&#10;include(&quot;:app&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>