<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SOLUCION_EMULADOR.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SOLUCION_EMULADOR.md" />
              <option name="originalContent" value="#  SOLUCIÓN: Android Studio ejecuta otro proyecto&#10;&#10;##  Diagnóstico&#10;Tu proyecto **AppAjiColorGrupo4** está ubicado en:&#10;```&#10;C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main&#10;```&#10;&#10;**ApplicationId:** `com.example.uinavegacion`&#10;&#10;Si Android Studio ejecuta otro proyecto, sigue estos pasos:&#10;&#10;---&#10;&#10;## ✅ SOLUCIÓN RÁPIDA (Recomendada)&#10;&#10;### Paso 1: Cerrar completamente Android Studio&#10;- Cierra TODAS las ventanas de Android Studio&#10;- Verifica en el Task Manager que no haya procesos de Android Studio corriendo&#10;&#10;### Paso 2: Ejecutar el script de limpieza&#10;1. Navega a la carpeta del proyecto&#10;2. Haz doble clic en: **`limpiar_proyecto.bat`**&#10;3. Espera a que termine y presiona cualquier tecla&#10;&#10;### Paso 3: Abrir el proyecto correcto&#10;1. Abre Android Studio&#10;2. **NO uses &quot;Recent Projects&quot;**&#10;3. Haz clic en **&quot;Open&quot;**&#10;4. Navega exactamente a: `C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main`&#10;5. Selecciona la **carpeta completa** (no abras subcarpetas)&#10;6. Haz clic en &quot;OK&quot;&#10;&#10;### Paso 4: Esperar sincronización&#10;- Android Studio sincronizará Gradle automáticamente&#10;- Verás &quot;Syncing...&quot; en la barra inferior&#10;- **ESPERA** hasta que diga &quot;Gradle sync finished&quot;&#10;- Pueden aparecer algunos warnings, es normal&#10;&#10;### Paso 5: Configurar Run Configuration&#10;1. En la barra superior, busca este ícono: **▶** (botón de ejecutar)&#10;2. A su izquierda hay un desplegable, haz clic en él&#10;3. Si no dice &quot;app&quot;, selecciona **&quot;app&quot;**&#10;4. Si no aparece &quot;app&quot;, haz clic en **&quot;Edit Configurations...&quot;**&#10;&#10;#### Si necesitas crear la configuración:&#10;```&#10;Name: app&#10;Module: App_Ajicolor-main.app (o simplemente &quot;app&quot;)&#10;Launch: Default Activity&#10;Deploy: Select APK from app bundle&#10;```&#10;&#10;### Paso 6: Seleccionar emulador&#10;1. Al lado del desplegable &quot;app&quot;, hay otro desplegable para dispositivos&#10;2. Selecciona tu emulador (por ejemplo: Pixel 5 API 34)&#10;3. Si no tienes emulador, crea uno:&#10;   - **Tools &gt; Device Manager**&#10;   - **Create Device**&#10;   - Selecciona un dispositivo (recomendado: Pixel 5)&#10;   - Selecciona API Level 34 o superior&#10;   - Finish&#10;&#10;### Paso 7: Ejecutar&#10;1. Haz clic en el botón verde ▶ **&quot;Run 'app'&quot;**&#10;2. El emulador se abrirá (puede tardar 1-2 minutos la primera vez)&#10;3. La app se instalará y ejecutará automáticamente&#10;&#10;---&#10;&#10;##  VERIFICACIÓN&#10;&#10;### Cómo saber que es el proyecto correcto:&#10;Cuando la app se ejecute, deberías ver:&#10;&#10;✅ Package: `com.example.uinavegacion`&#10;✅ La pantalla de Login o Home de tu aplicación&#10;✅ El título en Android Studio debe decir: **&quot;AppAjiColorGrupo4&quot;**&#10;&#10;### Si aún ejecuta otro proyecto:&#10;&#10;#### Método 1: Invalidar caché&#10;1. **File &gt; Invalidate Caches...**&#10;2. Marca **todas** las opciones:&#10;   - Clear file system cache&#10;   - Clear VCS log caches and indexes&#10;   - Clear downloaded shared indexes&#10;3. Haz clic en **&quot;Invalidate and Restart&quot;**&#10;4. Espera a que Android Studio se reinicie completamente&#10;5. Repite desde el Paso 3 de la solución rápida&#10;&#10;#### Método 2: Eliminar configuraciones antiguas&#10;1. **Run &gt; Edit Configurations...**&#10;2. En el panel izquierdo, verás todas las configuraciones de ejecución&#10;3. **Elimina** todas EXCEPTO &quot;app&quot; (selecciona y presiona &quot;-&quot;)&#10;4. Si &quot;app&quot; no existe:&#10;   - Haz clic en **&quot;+&quot;** (arriba a la izquierda)&#10;   - Selecciona **&quot;Android App&quot;**&#10;   - Configura:&#10;     ```&#10;     Name: app&#10;     Module: App_Ajicolor-main.app&#10;     Launch: Default Activity&#10;     ```&#10;   - **Apply** &gt; **OK**&#10;&#10;#### Método 3: Verificar workspace.xml&#10;1. Cierra Android Studio&#10;2. Abre: `C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\.idea\workspace.xml`&#10;3. Busca la línea que contenga `&lt;ProjectViewState&gt;`&#10;4. Verifica que la ruta sea correcta&#10;5. Si hay referencias a otro proyecto, borra el archivo workspace.xml&#10;6. Abre de nuevo Android Studio&#10;&#10;---&#10;&#10;##  PROBLEMAS COMUNES&#10;&#10;### Problema: &quot;Could not find androidx.compose.material3:material3-adaptive:1.0.0&quot;&#10;**Solución:** Esta dependencia NO existe. Ya está solucionado en el proyecto.&#10;&#10;### Problema: &quot;Unresolved reference 'ElevatedCard'&quot;&#10;**Solución:** Falta importar:&#10;```kotlin&#10;import androidx.compose.material3.ElevatedCard&#10;```&#10;&#10;### Problema: El emulador no inicia&#10;**Solución:**&#10;1. **Tools &gt; Device Manager**&#10;2. Borra el emulador existente&#10;3. Crea uno nuevo con API Level 34&#10;4. Asigna más RAM (4 GB recomendado)&#10;&#10;### Problema: &quot;Expecting '}'&quot; en HomeScreen.kt&#10;**Solución:** Hay un error de sintaxis. Revisa que todas las llaves estén cerradas correctamente.&#10;&#10;---&#10;&#10;##  COMANDOS ÚTILES DE GRADLE (DESDE TERMINAL)&#10;&#10;Si prefieres usar la terminal de Windows (CMD):&#10;&#10;```cmd&#10;cd C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main&#10;&#10;REM Limpiar proyecto&#10;gradlew.bat clean&#10;&#10;REM Construir proyecto&#10;gradlew.bat build&#10;&#10;REM Instalar en dispositivo conectado&#10;gradlew.bat installDebug&#10;&#10;REM Ver tareas disponibles&#10;gradlew.bat tasks&#10;```&#10;&#10;---&#10;&#10;##  ATAJOS DE TECLADO&#10;&#10;- **Shift + F10**: Ejecutar app&#10;- **Ctrl + F9**: Build project&#10;- **Ctrl + Shift + F9**: Rebuild&#10;- **Alt + Shift + F10**: Seleccionar configuración y ejecutar&#10;- **Ctrl + Shift + A**: Buscar acciones (escribe &quot;Clean Project&quot;, &quot;Sync Gradle&quot;, etc.)&#10;&#10;---&#10;&#10;##  SI NADA FUNCIONA&#10;&#10;1. **Cierra Android Studio**&#10;2. **Borra estas carpetas:**&#10;   ```&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\.gradle&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\.idea&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\app\build&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\build&#10;   ```&#10;3. **Abre Android Studio**&#10;4. **Import Project** (no &quot;Open&quot;)&#10;5. Selecciona: `C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main`&#10;6. Sigue el asistente de importación&#10;7. Espera la sincronización completa&#10;&#10;---&#10;&#10;## ✨ INFORMACIÓN DEL PROYECTO&#10;&#10;- **Nombre:** AppAjiColorGrupo4&#10;- **Package:** com.example.uinavegacion&#10;- **Min SDK:** 24&#10;- **Target SDK:** 36&#10;- **Compile SDK:** 36&#10;- **Language:** Kotlin&#10;- **UI Framework:** Jetpack Compose con Material 3&#10;&#10;---&#10;&#10;**Última actualización:** 26 de octubre de 2025&#10;" />
              <option name="updatedContent" value="#  SOLUCIÓN: Android Studio ejecuta otro proyecto&#10;&#10;##  Diagnóstico&#10;Tu proyecto **AppAjiColorGrupo4** está ubicado en:&#10;```&#10;C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main&#10;```&#10;&#10;**ApplicationId:** `com.example.uinavegacion`&#10;&#10;Si Android Studio ejecuta otro proyecto, sigue estos pasos:&#10;&#10;---&#10;&#10;## ✅ SOLUCIÓN RÁPIDA (Recomendada)&#10;&#10;### Paso 1: Cerrar completamente Android Studio&#10;- Cierra TODAS las ventanas de Android Studio&#10;- Verifica en el Task Manager que no haya procesos de Android Studio corriendo&#10;&#10;### Paso 2: Ejecutar el script de limpieza&#10;1. Navega a la carpeta del proyecto&#10;2. Haz doble clic en: **`limpiar_proyecto.bat`**&#10;3. Espera a que termine y presiona cualquier tecla&#10;&#10;### Paso 3: Abrir el proyecto correcto&#10;1. Abre Android Studio&#10;2. **NO uses &quot;Recent Projects&quot;**&#10;3. Haz clic en **&quot;Open&quot;**&#10;4. Navega exactamente a: `C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main`&#10;5. Selecciona la **carpeta completa** (no abras subcarpetas)&#10;6. Haz clic en &quot;OK&quot;&#10;&#10;### Paso 4: Esperar sincronización&#10;- Android Studio sincronizará Gradle automáticamente&#10;- Verás &quot;Syncing...&quot; en la barra inferior&#10;- **ESPERA** hasta que diga &quot;Gradle sync finished&quot;&#10;- Pueden aparecer algunos warnings, es normal&#10;&#10;### Paso 5: Configurar Run Configuration&#10;1. En la barra superior, busca este ícono: **▶** (botón de ejecutar)&#10;2. A su izquierda hay un desplegable, haz clic en él&#10;3. Si no dice &quot;app&quot;, selecciona **&quot;app&quot;**&#10;4. Si no aparece &quot;app&quot;, haz clic en **&quot;Edit Configurations...&quot;**&#10;&#10;#### Si necesitas crear la configuración:&#10;```&#10;Name: app&#10;Module: App_Ajicolor-main.app (o simplemente &quot;app&quot;)&#10;Launch: Default Activity&#10;Deploy: Select APK from app bundle&#10;```&#10;&#10;### Paso 6: Seleccionar emulador&#10;1. Al lado del desplegable &quot;app&quot;, hay otro desplegable para dispositivos&#10;2. Selecciona tu emulador (por ejemplo: Pixel 5 API 34)&#10;3. Si no tienes emulador, crea uno:&#10;   - **Tools &gt; Device Manager**&#10;   - **Create Device**&#10;   - Selecciona un dispositivo (recomendado: Pixel 5)&#10;   - Selecciona API Level 34 o superior&#10;   - Finish&#10;&#10;### Paso 7: Ejecutar&#10;1. Haz clic en el botón verde ▶ **&quot;Run 'app'&quot;**&#10;2. El emulador se abrirá (puede tardar 1-2 minutos la primera vez)&#10;3. La app se instalará y ejecutará automáticamente&#10;&#10;---&#10;&#10;##  VERIFICACIÓN&#10;&#10;### Cómo saber que es el proyecto correcto:&#10;Cuando la app se ejecute, deberías ver:&#10;&#10;✅ Package: `com.example.uinavegacion`&#10;✅ La pantalla de Login o Home de tu aplicación&#10;✅ El título en Android Studio debe decir: **&quot;AppAjiColorGrupo4&quot;**&#10;&#10;### Si aún ejecuta otro proyecto:&#10;&#10;#### Método 1: Invalidar caché&#10;1. **File &gt; Invalidate Caches...**&#10;2. Marca **todas** las opciones:&#10;   - Clear file system cache&#10;   - Clear VCS log caches and indexes&#10;   - Clear downloaded shared indexes&#10;3. Haz clic en **&quot;Invalidate and Restart&quot;**&#10;4. Espera a que Android Studio se reinicie completamente&#10;5. Repite desde el Paso 3 de la solución rápida&#10;&#10;#### Método 2: Eliminar configuraciones antiguas&#10;1. **Run &gt; Edit Configurations...**&#10;2. En el panel izquierdo, verás todas las configuraciones de ejecución&#10;3. **Elimina** todas EXCEPTO &quot;app&quot; (selecciona y presiona &quot;-&quot;)&#10;4. Si &quot;app&quot; no existe:&#10;   - Haz clic en **&quot;+&quot;** (arriba a la izquierda)&#10;   - Selecciona **&quot;Android App&quot;**&#10;   - Configura:&#10;     ```&#10;     Name: app&#10;     Module: App_Ajicolor-main.app&#10;     Launch: Default Activity&#10;     ```&#10;   - **Apply** &gt; **OK**&#10;&#10;#### Método 3: Verificar workspace.xml&#10;1. Cierra Android Studio&#10;2. Abre: `C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\.idea\workspace.xml`&#10;3. Busca la línea que contenga `&lt;ProjectViewState&gt;`&#10;4. Verifica que la ruta sea correcta&#10;5. Si hay referencias a otro proyecto, borra el archivo workspace.xml&#10;6. Abre de nuevo Android Studio&#10;&#10;---&#10;&#10;##  PROBLEMAS COMUNES&#10;&#10;### Problema: &quot;Could not find androidx.compose.material3:material3-adaptive:1.0.0&quot;&#10;**Solución:** Esta dependencia NO existe. Ya está solucionado en el proyecto.&#10;&#10;### Problema: &quot;Unresolved reference 'ElevatedCard'&quot;&#10;**Solución:** Falta importar:&#10;```kotlin&#10;import androidx.compose.material3.ElevatedCard&#10;```&#10;&#10;### Problema: El emulador no inicia&#10;**Solución:**&#10;1. **Tools &gt; Device Manager**&#10;2. Borra el emulador existente&#10;3. Crea uno nuevo con API Level 34&#10;4. Asigna más RAM (4 GB recomendado)&#10;&#10;### Problema: &quot;Expecting '}'&quot; en HomeScreen.kt&#10;**Solución:** Hay un error de sintaxis. Revisa que todas las llaves estén cerradas correctamente.&#10;&#10;---&#10;&#10;##  COMANDOS ÚTILES DE GRADLE (DESDE TERMINAL)&#10;&#10;Si prefieres usar la terminal de Windows (CMD):&#10;&#10;```cmd&#10;cd C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main&#10;&#10;REM Limpiar proyecto&#10;gradlew.bat clean&#10;&#10;REM Construir proyecto&#10;gradlew.bat build&#10;&#10;REM Instalar en dispositivo conectado&#10;gradlew.bat installDebug&#10;&#10;REM Ver tareas disponibles&#10;gradlew.bat tasks&#10;```&#10;&#10;---&#10;&#10;##  ATAJOS DE TECLADO&#10;&#10;- **Shift + F10**: Ejecutar app&#10;- **Ctrl + F9**: Build project&#10;- **Ctrl + Shift + F9**: Rebuild&#10;- **Alt + Shift + F10**: Seleccionar configuración y ejecutar&#10;- **Ctrl + Shift + A**: Buscar acciones (escribe &quot;Clean Project&quot;, &quot;Sync Gradle&quot;, etc.)&#10;&#10;---&#10;&#10;##  SI NADA FUNCIONA&#10;&#10;1. **Cierra Android Studio**&#10;2. **Borra estas carpetas:**&#10;   ```&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\.gradle&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\.idea&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\app\build&#10;   C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main\build&#10;   ```&#10;3. **Abre Android Studio**&#10;4. **Import Project** (no &quot;Open&quot;)&#10;5. Selecciona: `C:\Users\josel\AndroidStudioProjects\App_Ajicolor-main`&#10;6. Sigue el asistente de importación&#10;7. Espera la sincronización completa&#10;&#10;---&#10;&#10;## ✨ INFORMACIÓN DEL PROYECTO&#10;&#10;- **Nombre:** AppAjiColorGrupo4&#10;- **Package:** com.example.uinavegacion&#10;- **Min SDK:** 24&#10;- **Target SDK:** 36&#10;- **Compile SDK:** 36&#10;- **Language:** Kotlin&#10;- **UI Framework:** Jetpack Compose con Material 3&#10;&#10;---&#10;&#10;**Última actualización:** 26 de octubre de 2025&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/uinavegacion/ui/screen/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/uinavegacion/ui/screen/LoginScreen.kt" />
              <option name="originalContent" value="package com.example.uinavegacion.ui.screen&#10;&#10;import androidx.compose.foundation.layout.*                   // Box/Column/Row/Spacer&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons                  // Íconos Material&#10;import androidx.compose.material.icons.filled.Visibility      // Ícono mostrar contraseña&#10;import androidx.compose.material.icons.filled.VisibilityOff   // Ícono ocultar contraseña&#10;import androidx.compose.material3.*                           // Material 3&#10;import androidx.compose.runtime.*                             // remember y Composable&#10;import androidx.compose.ui.Alignment                          // Alineaciones&#10;import androidx.compose.ui.Modifier                           // Modificador&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.*                       // KeyboardOptions/Types/Transformations&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp                            // DPs&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle // Observa StateFlow con lifecycle&#10;import com.example.uinavegacion.data.local.storage.UserPreferences&#10;import com.example.uinavegacion.ui.viewmodel.AuthViewModel         // Nuestro ViewModel&#10;import com.example.uinavegacion.ui.components.AppBackground&#10;&#10;&#10;//1 Lo primero que creamos en el archivo&#10;@Composable                                       // Pantalla Login conectada al VM&#10;fun LoginScreenVm(&#10;    vm: AuthViewModel,                            // MOD: recibimos el VM desde NavGraph&#10;    onLoginOkNavigateHome: () -&gt; Unit,            // Navega a Home cuando el login es exitoso&#10;    onGoRegister: () -&gt; Unit,                     // Navega a Registro&#10;    onGoPasswordReset: () -&gt; Unit,                // Navega a Reset Password&#10;) {&#10;&#10;    val state by vm.login.collectAsStateWithLifecycle()      // Observa el StateFlow en tiempo real&#10;&#10;    //contexto&#10;    val context = LocalContext.current&#10;    //manipulo mi Data Store&#10;    val userPrefs = remember { UserPreferences(context) }&#10;&#10;    LaunchedEffect(state.success) {&#10;        if (state.success) {                                     // Si login fue exitoso…&#10;            userPrefs.setLoggedIn(true)&#10;            vm.clearLoginResult()                                // Limpia banderas&#10;            onLoginOkNavigateHome()                              // Navega a Home&#10;        }&#10;    }&#10;&#10;&#10;    LoginScreen(                                             // Delegamos a UI presentacional&#10;        email = state.email,                                 // Valor de email&#10;        pass = state.pass,                                   // Valor de password&#10;        emailError = state.emailError,                       // Error de email&#10;        passError = state.passError,                         // (Opcional) error de pass en login&#10;        canSubmit = state.canSubmit,                         // Habilitar botón&#10;        isSubmitting = state.isSubmitting,                   // Loading&#10;        errorMsg = state.errorMsg,                           // Error global&#10;        onEmailChange = vm::onLoginEmailChange,              // Handler email&#10;        onPassChange = vm::onLoginPassChange,                // Handler pass&#10;        onSubmit = vm::submitLogin,                          // Acción enviar&#10;        onGoRegister = onGoRegister                          // Ir a Registro&#10;    )&#10;}&#10;&#10;&#10;//2 modificamos la funcion principal haciendo private y agregando variable y elementos dle fiormulario&#10;@Composable // Pantalla Login (solo navegación, sin formularios)&#10;private fun LoginScreen(&#10;    //3 Modificamos estos parametros&#10;    email: String,                                           // Campo email&#10;    pass: String,                                            // Campo contraseña&#10;    emailError: String?,                                     // Error de email&#10;    passError: String?,                                      // Error de password (opcional)&#10;    canSubmit: Boolean,                                      // Habilitar botón&#10;    isSubmitting: Boolean,                                   // Flag loading&#10;    errorMsg: String?,                                       // Error global (credenciales)&#10;    onEmailChange: (String) -&gt; Unit,                         // Handler cambio email&#10;    onPassChange: (String) -&gt; Unit,                          // Handler cambio password&#10;    onSubmit: () -&gt; Unit,                                    // Acción enviar&#10;    onGoRegister: () -&gt; Unit                                 // Acción ir a registro&#10;) {&#10;    //4 Agregamos la siguiente linea&#10;    var showPass by remember { mutableStateOf(false) }        // Estado local para mostrar/ocultar contraseña&#10;&#10;    AppBackground {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize() // Ocupa todo&#10;                .padding(16.dp), // Margen&#10;            contentAlignment = Alignment.Center // Centro&#10;        ) {&#10;        Column(&#10;            //5 Anexamos el modificador&#10;            modifier = Modifier.fillMaxWidth(),              // Ancho completo&#10;            horizontalAlignment = Alignment.CenterHorizontally // Centrado horizontal&#10;        ) {&#10;            Text(&#10;                text = &quot;Login&quot;,&#10;                style = MaterialTheme.typography.headlineSmall // Título&#10;            )&#10;            Spacer(Modifier.height(12.dp)) // Separación&#10;&#10;            Text(&#10;                text = &quot;Pantalla de Login (demo). Usa la barra superior, el menú lateral o los botones.&quot;,&#10;                textAlign = TextAlign.Center // Alineación centrada&#10;            )&#10;            Spacer(Modifier.height(20.dp)) // Separación&#10;&#10;            //5 Borramos los elementos anteriores y comenzamos a agregar los elementos dle formulario&#10;// ---------- EMAIL ----------&#10;            OutlinedTextField(&#10;                value = email,                               // Valor actual&#10;                onValueChange = onEmailChange,               // Notifica VM (valida email)&#10;                label = { Text(&quot;Email&quot;) },                   // Etiqueta&#10;                singleLine = true,                           // Una línea&#10;                isError = emailError != null,                // Marca error si corresponde&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email        // Teclado de email&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()           // Ancho completo&#10;            )&#10;            if (emailError != null) {                        // Muestra mensaje si hay error&#10;                Text(emailError, color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;&#10;            Spacer(Modifier.height(8.dp))                    // Espacio&#10;&#10;            // ---------- PASSWORD (oculta por defecto) ----------&#10;            OutlinedTextField(&#10;                value = pass,                                // Valor actual&#10;                onValueChange = onPassChange,                // Notifica VM&#10;                label = { Text(&quot;Contraseña&quot;) },              // Etiqueta&#10;                singleLine = true,                           // Una línea&#10;                visualTransformation = if (showPass) VisualTransformation.None else PasswordVisualTransformation(), // Toggle mostrar/ocultar&#10;                trailingIcon = {                             // Ícono para alternar visibilidad&#10;                    IconButton(onClick = { showPass = !showPass }) {&#10;                        Icon(&#10;                            imageVector = if (showPass) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                            contentDescription = if (showPass) &quot;Ocultar contraseña&quot; else &quot;Mostrar contraseña&quot;&#10;                        )&#10;                    }&#10;                },&#10;                isError = passError != null,                 // (Opcional) marcar error&#10;                modifier = Modifier.fillMaxWidth()           // Ancho completo&#10;            )&#10;            if (passError != null) {                         // (Opcional) mostrar error&#10;                Text(passError, color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;&#10;            Spacer(Modifier.height(16.dp))                   // Espacio&#10;&#10;            // ---------- BOTÓN ENTRAR ----------&#10;            Button(&#10;                onClick = onSubmit,                          // Envía login&#10;                enabled = canSubmit &amp;&amp; !isSubmitting,        // Solo si válido y no cargando&#10;                modifier = Modifier.fillMaxWidth()           // Ancho completo&#10;            ) {&#10;                if (isSubmitting) {                          // UI de carga&#10;                    CircularProgressIndicator(strokeWidth = 2.dp, modifier = Modifier.size(18.dp))&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(&quot;Validando...&quot;)&#10;                } else {&#10;                    Text(&quot;Entrar&quot;)&#10;                }&#10;            }&#10;&#10;            if (errorMsg != null) {                          // Error global (credenciales)&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(errorMsg, color = MaterialTheme.colorScheme.error)&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))                   // Espacio&#10;&#10;            // ---------- BOTÓN IR A REGISTRO ----------&#10;            OutlinedButton(onClick = onGoRegister, modifier = Modifier.fillMaxWidth()) {&#10;                Text(&quot;Crear cuenta&quot;)&#10;            }&#10;            //fin modificacion de formulario&#10;        }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.uinavegacion.ui.screen&#10;&#10;import androidx.compose.foundation.layout.*                   // Box/Column/Row/Spacer&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons                  // Íconos Material&#10;import androidx.compose.material.icons.filled.Visibility      // Ícono mostrar contraseña&#10;import androidx.compose.material.icons.filled.VisibilityOff   // Ícono ocultar contraseña&#10;import androidx.compose.material3.*                           // Material 3&#10;import androidx.compose.runtime.*                             // remember y Composable&#10;import androidx.compose.ui.Alignment                          // Alineaciones&#10;import androidx.compose.ui.Modifier                           // Modificador&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.*                       // KeyboardOptions/Types/Transformations&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp                            // DPs&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle // Observa StateFlow con lifecycle&#10;import com.example.uinavegacion.data.local.storage.UserPreferences&#10;import com.example.uinavegacion.ui.viewmodel.AuthViewModel         // Nuestro ViewModel&#10;import com.example.uinavegacion.ui.components.AppBackground&#10;&#10;&#10;//1 Lo primero que creamos en el archivo&#10;@Composable                                       // Pantalla Login conectada al VM&#10;fun LoginScreenVm(&#10;    vm: AuthViewModel,                            // MOD: recibimos el VM desde NavGraph&#10;    onLoginOkNavigateHome: () -&gt; Unit,            // Navega a Home cuando el login es exitoso&#10;    onGoRegister: () -&gt; Unit,                     // Navega a Registro&#10;    onGoPasswordReset: () -&gt; Unit,                // Navega a Reset Password&#10;) {&#10;&#10;    val state by vm.login.collectAsStateWithLifecycle()      // Observa el StateFlow en tiempo real&#10;&#10;    //contexto&#10;    val context = LocalContext.current&#10;    //manipulo mi Data Store&#10;    val userPrefs = remember { UserPreferences(context) }&#10;&#10;    LaunchedEffect(state.success) {&#10;        if (state.success) {                                     // Si login fue exitoso…&#10;            userPrefs.setLoggedIn(true)&#10;            vm.clearLoginResult()                                // Limpia banderas&#10;            onLoginOkNavigateHome()                              // Navega a Home&#10;        }&#10;    }&#10;&#10;&#10;    LoginScreen(                                             // Delegamos a UI presentacional&#10;        email = state.email,                                 // Valor de email&#10;        pass = state.pass,                                   // Valor de password&#10;        emailError = state.emailError,                       // Error de email&#10;        passError = state.passError,                         // (Opcional) error de pass en login&#10;        canSubmit = state.canSubmit,                         // Habilitar botón&#10;        isSubmitting = state.isSubmitting,                   // Loading&#10;        errorMsg = state.errorMsg,                           // Error global&#10;        onEmailChange = vm::onLoginEmailChange,              // Handler email&#10;        onPassChange = vm::onLoginPassChange,                // Handler pass&#10;        onSubmit = vm::submitLogin,                          // Acción enviar&#10;        onGoRegister = onGoRegister                          // Ir a Registro&#10;    )&#10;}&#10;&#10;&#10;//2 modificamos la funcion principal haciendo private y agregando variable y elementos dle fiormulario&#10;@Composable // Pantalla Login (solo navegación, sin formularios)&#10;private fun LoginScreen(&#10;    //3 Modificamos estos parametros&#10;    email: String,                                           // Campo email&#10;    pass: String,                                            // Campo contraseña&#10;    emailError: String?,                                     // Error de email&#10;    passError: String?,                                      // Error de password (opcional)&#10;    canSubmit: Boolean,                                      // Habilitar botón&#10;    isSubmitting: Boolean,                                   // Flag loading&#10;    errorMsg: String?,                                       // Error global (credenciales)&#10;    onEmailChange: (String) -&gt; Unit,                         // Handler cambio email&#10;    onPassChange: (String) -&gt; Unit,                          // Handler cambio password&#10;    onSubmit: () -&gt; Unit,                                    // Acción enviar&#10;    onGoRegister: () -&gt; Unit                                 // Acción ir a registro&#10;) {&#10;    //4 Agregamos la siguiente linea&#10;    var showPass by remember { mutableStateOf(false) }        // Estado local para mostrar/ocultar contraseña&#10;&#10;    AppBackground {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize() // Ocupa todo&#10;                .padding(16.dp), // Margen&#10;            contentAlignment = Alignment.Center // Centro&#10;        ) {&#10;        Column(&#10;            //5 Anexamos el modificador&#10;            modifier = Modifier.fillMaxWidth(),              // Ancho completo&#10;            horizontalAlignment = Alignment.CenterHorizontally // Centrado horizontal&#10;        ) {&#10;            Text(&#10;                text = &quot;Login&quot;,&#10;                style = MaterialTheme.typography.headlineSmall // Título&#10;            )&#10;            Spacer(Modifier.height(12.dp)) // Separación&#10;&#10;            Text(&#10;                text = &quot;Pantalla de Login (demo). Usa la barra superior, el menú lateral o los botones.&quot;,&#10;                textAlign = TextAlign.Center // Alineación centrada&#10;            )&#10;            Spacer(Modifier.height(20.dp)) // Separación&#10;&#10;            //5 Borramos los elementos anteriores y comenzamos a agregar los elementos dle formulario&#10;// ---------- EMAIL ----------&#10;            OutlinedTextField(&#10;                value = email,                               // Valor actual&#10;                onValueChange = onEmailChange,               // Notifica VM (valida email)&#10;                label = { Text(&quot;Email&quot;) },                   // Etiqueta&#10;                singleLine = true,                           // Una línea&#10;                isError = emailError != null,                // Marca error si corresponde&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email        // Teclado de email&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()           // Ancho completo&#10;            )&#10;            if (emailError != null) {                        // Muestra mensaje si hay error&#10;                Text(emailError, color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;&#10;            Spacer(Modifier.height(8.dp))                    // Espacio&#10;&#10;            // ---------- PASSWORD (oculta por defecto) ----------&#10;            OutlinedTextField(&#10;                value = pass,                                // Valor actual&#10;                onValueChange = onPassChange,                // Notifica VM&#10;                label = { Text(&quot;Contraseña&quot;) },              // Etiqueta&#10;                singleLine = true,                           // Una línea&#10;                visualTransformation = if (showPass) VisualTransformation.None else PasswordVisualTransformation(), // Toggle mostrar/ocultar&#10;                trailingIcon = {                             // Ícono para alternar visibilidad&#10;                    IconButton(onClick = { showPass = !showPass }) {&#10;                        Icon(&#10;                            imageVector = if (showPass) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                            contentDescription = if (showPass) &quot;Ocultar contraseña&quot; else &quot;Mostrar contraseña&quot;&#10;                        )&#10;                    }&#10;                },&#10;                isError = passError != null,                 // (Opcional) marcar error&#10;                modifier = Modifier.fillMaxWidth()           // Ancho completo&#10;            )&#10;            if (passError != null) {                         // (Opcional) mostrar error&#10;                Text(passError, color = MaterialTheme.colorScheme.error, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;&#10;            Spacer(Modifier.height(16.dp))                   // Espacio&#10;&#10;            // ---------- BOTÓN ENTRAR ----------&#10;            Button(&#10;                onClick = onSubmit,                          // Envía login&#10;                enabled = canSubmit &amp;&amp; !isSubmitting,        // Solo si válido y no cargando&#10;                modifier = Modifier.fillMaxWidth()           // Ancho completo&#10;            ) {&#10;                if (isSubmitting) {                          // UI de carga&#10;                    CircularProgressIndicator(strokeWidth = 2.dp, modifier = Modifier.size(18.dp))&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(&quot;Validando...&quot;)&#10;                } else {&#10;                    Text(&quot;Entrar&quot;)&#10;                }&#10;            }&#10;&#10;            if (errorMsg != null) {                          // Error global (credenciales)&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(errorMsg, color = MaterialTheme.colorScheme.error)&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))                   // Espacio&#10;&#10;            // ---------- BOTÓN IR A REGISTRO ----------&#10;            OutlinedButton(onClick = onGoRegister, modifier = Modifier.fillMaxWidth()) {&#10;                Text(&quot;Crear cuenta&quot;)&#10;            }&#10;            //fin modificacion de formulario&#10;        }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>