<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Jetpack Compose&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.foundation)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;&#10;    // Activity Compose&#10;    implementation(libs.androidx.activity.compose)&#10;&#10;    // Navigation Compose (estable)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.8.5&quot;)&#10;&#10;    // Lifecycle + ViewModel en Compose (alineadas)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-compose:2.8.6&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.apppolera_ecommerce_grupo4&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Jetpack Compose&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.foundation)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;&#10;    // Activity Compose&#10;    implementation(libs.androidx.activity.compose)&#10;&#10;    // Navigation Compose (estable)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.8.5&quot;)&#10;&#10;    // Lifecycle + ViewModel en Compose (alineadas)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.8.6&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-compose:2.8.6&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AppPolera_ecommerce_Grupo4&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/MainActivity.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.HomeScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.ProfileScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.SettingsScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.RegistroScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.ResumenScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.theme.AppPolera_ecommerce_Grupo4Theme&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.MainViewModel&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;import androidx.compose.foundation.layout.padding&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent { AjiColorApp() }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AjiColorApp() {&#10;    AppPolera_ecommerce_Grupo4Theme {&#10;        val navController = rememberNavController()&#10;        val mainVm: MainViewModel = viewModel()&#10;        val usuarioVm: UsuarioViewModel = viewModel()&#10;&#10;        Scaffold { innerPadding -&gt;&#10;            NavHost(&#10;                navController = navController,&#10;                startDestination = Screen.Home.route,&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                composable(Screen.Home.route) {&#10;                    HomeScreen(navController = navController)&#10;                }&#10;                composable(Screen.Profile.route) {&#10;                    ProfileScreen(navController = navController, viewModel = mainVm)&#10;                }&#10;                composable(Screen.Settings.route) {&#10;                    SettingsScreen(navController = navController)&#10;                }&#10;                composable(Screen.Registro.route) {&#10;                    RegistroScreen(navController = navController, viewModel = usuarioVm)&#10;                }&#10;                composable(Screen.Resumen.route) {&#10;                    ResumenScreen(navController = navController, viewModel = usuarioVm)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AppPreview() {&#10;    AjiColorApp()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.HomeScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.ProfileScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.SettingsScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.RegistroScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.screens.ResumenScreen&#10;import com.example.apppolera_ecommerce_grupo4.ui.theme.AppPolera_ecommerce_Grupo4Theme&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.MainViewModel&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;import androidx.compose.foundation.layout.padding&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent { AjiColorApp() }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AjiColorApp() {&#10;    AppPolera_ecommerce_Grupo4Theme {&#10;        val navController = rememberNavController()&#10;        val mainVm: MainViewModel = viewModel()&#10;        val usuarioVm: UsuarioViewModel = viewModel()&#10;&#10;        Scaffold { innerPadding -&gt;&#10;            NavHost(&#10;                navController = navController,&#10;                startDestination = Screen.Home.route,&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                composable(Screen.Home.route) {&#10;                    HomeScreen(navController = navController)&#10;                }&#10;                composable(Screen.Profile.route) {&#10;                    ProfileScreen(navController = navController, viewModel = mainVm)&#10;                }&#10;                composable(Screen.Settings.route) {&#10;                    SettingsScreen(navController = navController)&#10;                }&#10;                composable(Screen.Registro.route) {&#10;                    RegistroScreen(navController = navController, viewModel = usuarioVm)&#10;                }&#10;                composable(Screen.Resumen.route) {&#10;                    ResumenScreen(navController = navController, viewModel = usuarioVm)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AppPreview() {&#10;    AjiColorApp()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/navigation/Screen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.navigation&#10;&#10;// Sealed class que define rutas tipo-safe para la navegación.&#10;// Cada pantalla se representa como un objeto único.&#10;// Si se requieren argumentos, se usa data class anidada.&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object HomeCompact : Screen(&quot;home_compact&quot;)&#10;    object Profile : Screen(&quot;profile&quot;)&#10;    object Registro : Screen(&quot;registro&quot;)&#10;    object Resumen : Screen(&quot;resumen&quot;)&#10;    object Settings : Screen(&quot;settings&quot;)&#10;&#10;    // Ejemplo de ruta con argumento&#10;    data class Detail(val itemId: String) : Screen(&quot;detail/{itemId}&quot;) {&#10;        fun routeWithId(): String = &quot;detail/$itemId&quot;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.navigation&#10;&#10;// Sealed class que define rutas tipo-safe para la navegación.&#10;// Cada pantalla se representa como un objeto único.&#10;// Si se requieren argumentos, se usa data class anidada.&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object HomeCompact : Screen(&quot;home_compact&quot;)&#10;    object Profile : Screen(&quot;profile&quot;)&#10;    object Registro : Screen(&quot;registro&quot;)&#10;    object Resumen : Screen(&quot;resumen&quot;)&#10;    object Settings : Screen(&quot;settings&quot;)&#10;&#10;    // Ejemplo de ruta con argumento&#10;    data class Detail(val itemId: String) : Screen(&quot;detail/{itemId}&quot;) {&#10;        fun routeWithId(): String = &quot;detail/$itemId&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.R&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import androidx.compose.ui.platform.LocalInspectionMode&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = { TopAppBar(title = { Text(&quot;AJI DE COLOR&quot;) }) }&#10;    ) { innerPadding -&gt;&#10;        HomeContent(&#10;            modifier = Modifier.padding(innerPadding),&#10;            navController = navController&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeContent(modifier: Modifier = Modifier, navController: NavController? = null) {&#10;    val isPreview = LocalInspectionMode.current&#10;    val logoPainter = if (isPreview) {&#10;        painterResource(android.R.drawable.ic_menu_gallery)&#10;    } else {&#10;        painterResource(id = R.drawable.logo)&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(20.dp),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Bienvenido a Poleras AJI DE COLOR&quot;,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            style = MaterialTheme.typography.titleLarge&#10;        )&#10;        Button(onClick = { navController?.navigate(Screen.Registro.route) }) {&#10;            Text(&quot;Explorar Nuestros Productos&quot;)&#10;        }&#10;        Image(&#10;            painter = logoPainter,&#10;            contentDescription = &quot;Logo App&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(150.dp),&#10;            contentScale = ContentScale.Fit&#10;        )&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun PreviewHome() {&#10;    HomeContent()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.Image&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.res.painterResource&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.navigation.NavController&#13;&#10;import com.example.apppolera_ecommerce_grupo4.R&#13;&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#13;&#10;import androidx.compose.ui.platform.LocalInspectionMode&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun HomeScreen(navController: NavController) {&#13;&#10;    Scaffold(&#13;&#10;        topBar = { TopAppBar(title = { Text(&quot;AJI DE COLOR&quot;) }) }&#13;&#10;    ) { innerPadding -&gt;&#13;&#10;        HomeContent(&#13;&#10;            modifier = Modifier.padding(innerPadding),&#13;&#10;            navController = navController&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun HomeContent(modifier: Modifier = Modifier, navController: NavController? = null) {&#13;&#10;    val isPreview = LocalInspectionMode.current&#13;&#10;    val logoPainter = if (isPreview) {&#13;&#10;        painterResource(android.R.drawable.ic_menu_gallery)&#13;&#10;    } else {&#13;&#10;        painterResource(id = R.drawable.logo)&#13;&#10;    }&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(20.dp),&#13;&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = &quot;Bienvenido a Poleras AJI DE COLOR&quot;,&#13;&#10;            color = MaterialTheme.colorScheme.primary,&#13;&#10;            style = MaterialTheme.typography.titleLarge&#13;&#10;        )&#13;&#10;        Button(onClick = { navController?.navigate(Screen.Registro.route) }) {&#13;&#10;            Text(&quot;Explorar Nuestros Productos&quot;)&#13;&#10;        }&#13;&#10;        Image(&#13;&#10;            painter = logoPainter,&#13;&#10;            contentDescription = &quot;Logo App&quot;,&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .height(150.dp),&#13;&#10;            contentScale = ContentScale.Fit&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Preview&#13;&#10;@Composable&#13;&#10;fun PreviewHome() {&#13;&#10;    HomeContent()&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.MainViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(navController: NavController, viewModel: MainViewModel) {&#10;    val currentBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = currentBackStackEntry?.destination?.route&#10;&#10;    Scaffold(&#10;        topBar = { CenterAlignedTopAppBar(title = { Text(&quot;Perfil&quot;) }) },&#10;        bottomBar = { BottomNavigationBar(navController, currentRoute) }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize(),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&quot;Bienvenido al Perfil&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController, currentRoute: String?) {&#10;    NavigationBar {&#10;        listOf(&#10;            Screen.Profile to Icons.Filled.Person,&#10;            Screen.Home to Icons.Filled.Home,&#10;            Screen.Settings to Icons.Filled.Settings&#10;        ).forEach { (screen, icon) -&gt;&#10;            NavigationBarItem(&#10;                selected = currentRoute == screen.route,&#10;                onClick = {&#10;                    navController.navigate(screen.route) {&#10;                        popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                        launchSingleTop = true&#10;                        restoreState = true&#10;                    }&#10;                },&#10;                icon = { Icon(icon, contentDescription = screen.route) },&#10;                label = { Text(screen.route) }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.Home&#13;&#10;import androidx.compose.material.icons.filled.Person&#13;&#10;import androidx.compose.material.icons.filled.Settings&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.navigation.NavController&#13;&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#13;&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#13;&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.MainViewModel&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun ProfileScreen(navController: NavController, viewModel: MainViewModel) {&#13;&#10;    val currentBackStackEntry by navController.currentBackStackEntryAsState()&#13;&#10;    val currentRoute = currentBackStackEntry?.destination?.route&#13;&#10;&#13;&#10;    Scaffold(&#13;&#10;        topBar = { CenterAlignedTopAppBar(title = { Text(&quot;Perfil&quot;) }) },&#13;&#10;        bottomBar = { BottomNavigationBar(navController, currentRoute) }&#13;&#10;    ) { innerPadding -&gt;&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .padding(innerPadding)&#13;&#10;                .fillMaxSize(),&#13;&#10;            verticalArrangement = Arrangement.Center,&#13;&#10;            horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;        ) {&#13;&#10;            Text(&quot;Bienvenido al Perfil&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun BottomNavigationBar(navController: NavController, currentRoute: String?) {&#13;&#10;    NavigationBar {&#13;&#10;        listOf(&#13;&#10;            Screen.Profile to Icons.Filled.Person,&#13;&#10;            Screen.Home to Icons.Filled.Home,&#13;&#10;            Screen.Settings to Icons.Filled.Settings&#13;&#10;        ).forEach { (screen, icon) -&gt;&#13;&#10;            NavigationBarItem(&#13;&#10;                selected = currentRoute == screen.route,&#13;&#10;                onClick = {&#13;&#10;                    navController.navigate(screen.route) {&#13;&#10;                        popUpTo(navController.graph.startDestinationId) { saveState = true }&#13;&#10;                        launchSingleTop = true&#13;&#10;                        restoreState = true&#13;&#10;                    }&#13;&#10;                },&#13;&#10;                icon = { Icon(icon, contentDescription = screen.route) },&#13;&#10;                label = { Text(screen.route) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/RegistroScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/RegistroScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;    viewModel: UsuarioViewModel&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = { CenterAlignedTopAppBar(title = { Text(&quot;Registro&quot;) }) }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = estado.nombre,&#10;                onValueChange = viewModel::actualizaNombre,&#10;                label = { Text(&quot;Nombre&quot;) },&#10;                isError = estado.errores.nombre != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (estado.errores.nombre != null) Text(estado.errores.nombre!!, color = MaterialTheme.colorScheme.error)&#10;&#10;            OutlinedTextField(&#10;                value = estado.correo,&#10;                onValueChange = viewModel::actualizaCorreo,&#10;                label = { Text(&quot;Correo&quot;) },&#10;                isError = estado.errores.correo != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (estado.errores.correo != null) Text(estado.errores.correo!!, color = MaterialTheme.colorScheme.error)&#10;&#10;            OutlinedTextField(&#10;                value = estado.clave,&#10;                onValueChange = viewModel::actualizaClave,&#10;                label = { Text(&quot;Contraseña&quot;) },&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                isError = estado.errores.clave != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (estado.errores.clave != null) Text(estado.errores.clave!!, color = MaterialTheme.colorScheme.error)&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Checkbox(&#10;                    checked = estado.aceptaTerminos,&#10;                    onCheckedChange = { viewModel.actualizaAceptaTerminos(it) }&#10;                )&#10;                Text(&quot;Acepto los términos y condiciones&quot;)&#10;            }&#10;            if (estado.errores.aceptaTerminos != null) Text(estado.errores.aceptaTerminos!!, color = MaterialTheme.colorScheme.error)&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (viewModel.validarFormulario()) {&#10;                        navController.navigate(Screen.Resumen.route) {&#10;                            popUpTo(Screen.Registro.route) { inclusive = false }&#10;                            launchSingleTop = true&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Registrar&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;    viewModel: UsuarioViewModel&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = { CenterAlignedTopAppBar(title = { Text(&quot;Registro&quot;) }) }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = estado.nombre,&#10;                onValueChange = viewModel::actualizaNombre,&#10;                label = { Text(&quot;Nombre&quot;) },&#10;                isError = estado.errores.nombre != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (estado.errores.nombre != null) Text(estado.errores.nombre!!, color = MaterialTheme.colorScheme.error)&#10;&#10;            OutlinedTextField(&#10;                value = estado.correo,&#10;                onValueChange = viewModel::actualizaCorreo,&#10;                label = { Text(&quot;Correo&quot;) },&#10;                isError = estado.errores.correo != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (estado.errores.correo != null) Text(estado.errores.correo!!, color = MaterialTheme.colorScheme.error)&#10;&#10;            OutlinedTextField(&#10;                value = estado.clave,&#10;                onValueChange = viewModel::actualizaClave,&#10;                label = { Text(&quot;Contraseña&quot;) },&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                isError = estado.errores.clave != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (estado.errores.clave != null) Text(estado.errores.clave!!, color = MaterialTheme.colorScheme.error)&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Checkbox(&#10;                    checked = estado.aceptaTerminos,&#10;                    onCheckedChange = { viewModel.actualizaAceptaTerminos(it) }&#10;                )&#10;                Text(&quot;Acepto los términos y condiciones&quot;)&#10;            }&#10;            if (estado.errores.aceptaTerminos != null) Text(estado.errores.aceptaTerminos!!, color = MaterialTheme.colorScheme.error)&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (viewModel.validarFormulario()) {&#10;                        navController.navigate(Screen.Resumen.route) {&#10;                            popUpTo(Screen.Registro.route) { inclusive = false }&#10;                            launchSingleTop = true&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Registrar&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResgitroScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResgitroScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Campo Nombre&#10;        OutlinedTextField(&#10;            value = estado.nombre,&#10;            onValueChange = viewModel::actualizaNombre,&#10;            label = { Text(&quot;Nombre&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.nombre != null,&#10;            supportingText = { estado.errores.nombre?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Correo&#10;        OutlinedTextField(&#10;            value = estado.correo,&#10;            onValueChange = viewModel::actualizaCorreo,&#10;            label = { Text(&quot;Correo electrónico&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.correo != null,&#10;            supportingText = { estado.errores.correo?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Clave&#10;        OutlinedTextField(&#10;            value = estado.clave,&#10;            onValueChange = viewModel::actualizaClave,&#10;            label = { Text(&quot;Clave&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            isError = estado.errores.clave != null,&#10;            supportingText = { estado.errores.clave?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Dirección&#10;        OutlinedTextField(&#10;            value = estado.direccion,&#10;            onValueChange = viewModel::actualizaDireccion,&#10;            label = { Text(&quot;Dirección&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.direccion != null,&#10;            supportingText = { estado.errores.direccion?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Checkbox términos&#10;        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {&#10;            Checkbox(&#10;                checked = estado.aceptaTerminos,&#10;                onCheckedChange = viewModel::actualizaAceptaTerminos&#10;            )&#10;            Text(&quot;Acepto los términos y condiciones&quot;)&#10;        }&#10;        if (estado.errores.aceptaTerminos != null) {&#10;            Text(estado.errores.aceptaTerminos!!, color = Color.Red)&#10;        }&#10;&#10;        // Botón registrar&#10;        Button(&#10;            onClick = {&#10;                if (viewModel.validarFormulario()) {&#10;                    navController.navigate(Routes.RESUMEN)&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Registrarse&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Routes&#10;&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;    viewModel: UsuarioViewModel&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Campo Nombre&#10;        OutlinedTextField(&#10;            value = estado.nombre,&#10;            onValueChange = viewModel::actualizaNombre,&#10;            label = { Text(&quot;Nombre&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.nombre != null,&#10;            supportingText = { estado.errores.nombre?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Correo&#10;        OutlinedTextField(&#10;            value = estado.correo,&#10;            onValueChange = viewModel::actualizaCorreo,&#10;            label = { Text(&quot;Correo electrónico&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.correo != null,&#10;            supportingText = { estado.errores.correo?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Clave&#10;        OutlinedTextField(&#10;            value = estado.clave,&#10;            onValueChange = viewModel::actualizaClave,&#10;            label = { Text(&quot;Clave&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            isError = estado.errores.clave != null,&#10;            supportingText = { estado.errores.clave?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Dirección&#10;        OutlinedTextField(&#10;            value = estado.direccion,&#10;            onValueChange = viewModel::actualizaDireccion,&#10;            label = { Text(&quot;Dirección&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.direccion != null,&#10;            supportingText = { estado.errores.direccion?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Checkbox términos&#10;        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {&#10;            Checkbox(&#10;                checked = estado.aceptaTerminos,&#10;                onCheckedChange = viewModel::actualizaAceptaTerminos&#10;            )&#10;            Text(&quot;Acepto los términos y condiciones&quot;)&#10;        }&#10;        if (estado.errores.aceptaTerminos != null) {&#10;            Text(estado.errores.aceptaTerminos!!, color = Color.Red)&#10;        }&#10;&#10;        // Botón registrar&#10;        Button(&#10;            onClick = {&#10;                if (viewModel.validarFormulario()) {&#10;                    navController.navigate(Routes.RESUMEN)&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Registrarse&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/ErroresUsuario.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/ErroresUsuario.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;typealias ErroresUsuario = UsuarioErrores&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;typealias ErroresUsuario = UsuarioErrores&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/UsuarioErrores.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/state/UsuarioErrores.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;/**&#10; * Errores de validación por campo para el formulario de Usuario.&#10; * Usa null o cadena vacía cuando no hay error.&#10; */&#10;data class UsuarioErrores(&#10;    val nombre: String? = null,&#10;    val correo: String? = null,&#10;    val clave: String? = null,&#10;    val direccion: String? = null,&#10;    val aceptaTerminos: String? = null&#10;) {&#10;    val hayErrores: Boolean&#10;        get() = listOf(nombre, correo, clave, direccion, aceptaTerminos).any { !it.isNullOrBlank() }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.state&#10;&#10;/**&#10; * Errores de validación por campo para el formulario de Usuario.&#10; * Usa null o cadena vacía cuando no hay error.&#10; */&#10;data class UsuarioErrores(&#10;    val nombre: String? = null,&#10;    val correo: String? = null,&#10;    val clave: String? = null,&#10;    val direccion: String? = null,&#10;    val aceptaTerminos: String? = null&#10;) {&#10;    val hayErrores: Boolean&#10;        get() = listOf(nombre, correo, clave, direccion, aceptaTerminos).any { !it.isNullOrBlank() }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Wrapper de compatibilidad: usa el nombre correcto del tema.&#10;@Deprecated(&quot;Usa AppPolera_ecommerce_Grupo4Theme en su lugar&quot;)&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(content: @Composable () -&gt; Unit) {&#10;    AppPolera_ecommerce_Grupo4Theme(content = content)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Wrapper de compatibilidad: usa el nombre correcto del tema.&#10;@Deprecated(&quot;Usa AppPolera_ecommerce_Grupo4Theme en su lugar&quot;)&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(content: @Composable () -&gt; Unit) {&#10;    AppPolera_ecommerce_Grupo4Theme(content = content)&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/utils/WindowSizeUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/utils/WindowSizeUtils.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.utils&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Stub inactivo: con layout Compact no necesitamos calcular WindowSizeClass.&#10;// Se mantiene la firma como utilitario no utilizado para evitar referencias rotas.&#10;@Composable&#10;fun getWindowSizeClass(): Any? = null" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.utils&#13;&#10;&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;&#13;&#10;// Stub inactivo: con layout Compact no necesitamos calcular WindowSizeClass.&#13;&#10;// Se mantiene la firma como utilitario no utilizado para evitar referencias rotas.&#13;&#10;@Composable&#13;&#10;fun getWindowSizeClass(): Any? = null" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/viewmodel/MainViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/viewmodel/MainViewModel.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.apppolera_ecommerce_grupo4.navigation.NavigationEvent&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import kotlinx.coroutines.flow.MutableSharedFlow&#10;import kotlinx.coroutines.flow.SharedFlow&#10;import kotlinx.coroutines.flow.asSharedFlow&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel central para la navegación.&#10; *&#10; * Expone funciones que emiten eventos de tipo [NavigationEvent],&#10; * representando intenciones de navegación.&#10; * Las pantallas (UI) llaman a estas funciones en lugar de usar directamente NavController.&#10; * La MainActivity observa estos eventos y los traduce en acciones reales sobre NavController.&#10; * De esta forma se logra:&#10; *  - Separación de responsabilidades.&#10; *  - Navegación desacoplada y coherente con el patrón MVVM.&#10; */&#10;class MainViewModel : ViewModel() {&#10;&#10;    // Flujo interno mutable de eventos de navegación&#10;    private val _navigationEvents = MutableSharedFlow&lt;NavigationEvent&gt;()&#10;&#10;    // Flujo expuesto de solo lectura para que la UI observe&#10;    val navigationEvents: SharedFlow&lt;NavigationEvent&gt; = _navigationEvents.asSharedFlow()&#10;&#10;    /**&#10;     * Navegar a una ruta específica.&#10;     * @param screen Ruta tipada definida en [Screen].&#10;     */&#10;    fun navigateTo(screen: Screen) {&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            _navigationEvents.emit(NavigationEvent.NavigateTo(route = screen))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Volver a la pantalla anterior en la pila de navegación.&#10;     */&#10;    fun navigateBack() {&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            _navigationEvents.emit(NavigationEvent.PopBackStack)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navegar hacia arriba en la jerarquía de navegación.&#10;     * Similar a back, pero pensado para grafos anidados.&#10;     */&#10;    fun navigateUp() {&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            _navigationEvents.emit(NavigationEvent.NavigateUp)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.apppolera_ecommerce_grupo4.navigation.NavigationEvent&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import kotlinx.coroutines.flow.MutableSharedFlow&#10;import kotlinx.coroutines.flow.SharedFlow&#10;import kotlinx.coroutines.flow.asSharedFlow&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel central para la navegación.&#10; *&#10; * Expone funciones que emiten eventos de tipo [NavigationEvent],&#10; * representando intenciones de navegación.&#10; * Las pantallas (UI) llaman a estas funciones en lugar de usar directamente NavController.&#10; * La MainActivity observa estos eventos y los traduce en acciones reales sobre NavController.&#10; * De esta forma se logra:&#10; *  - Separación de responsabilidades.&#10; *  - Navegación desacoplada y coherente con el patrón MVVM.&#10; */&#10;class MainViewModel : ViewModel() {&#10;&#10;    // Flujo interno mutable de eventos de navegación&#10;    private val _navigationEvents = MutableSharedFlow&lt;NavigationEvent&gt;()&#10;&#10;    // Flujo expuesto de solo lectura para que la UI observe&#10;    val navigationEvents: SharedFlow&lt;NavigationEvent&gt; = _navigationEvents.asSharedFlow()&#10;&#10;    /**&#10;     * Navegar a una ruta específica.&#10;     * @param screen Ruta tipada definida en [Screen].&#10;     */&#10;    fun navigateTo(screen: Screen) {&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            _navigationEvents.emit(NavigationEvent.NavigateTo(route = screen))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Volver a la pantalla anterior en la pila de navegación.&#10;     */&#10;    fun navigateBack() {&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            _navigationEvents.emit(NavigationEvent.PopBackStack)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navegar hacia arriba en la jerarquía de navegación.&#10;     * Similar a back, pero pensado para grafos anidados.&#10;     */&#10;    fun navigateUp() {&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            _navigationEvents.emit(NavigationEvent.NavigateUp)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/viewmodel/UsuarioViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/viewmodel/UsuarioViewModel.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.apppolera_ecommerce_grupo4.navigation.NavigationEvent&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.UsuarioUiState&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.UsuarioErrores&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;&#10;class UsuarioViewModel : ViewModel() {&#10;&#10;    // Flow que representa el estado actual del formulario de usuario.&#10;    // Incluye campos como nombre, correo, clave, dirección y aceptación de términos,&#10;    // además de posibles errores de validación por campo.&#10;    private val _estado = MutableStateFlow(UsuarioUiState())&#10;    val estado: StateFlow&lt;UsuarioUiState&gt; = _estado&#10;&#10;    // Flow que emite eventos de navegación desde el ViewModel hacia la UI.&#10;    // Se usa para indicar transiciones de pantalla, como ir al resumen tras el registro.&#10;    private val _navigationEvents = MutableSharedFlow&lt;NavigationEvent&gt;()&#10;    val navigationEvents: SharedFlow&lt;NavigationEvent&gt; = _navigationEvents.asSharedFlow()&#10;&#10;    // Cada función actualiza un campo del formulario y limpia su error asociado.&#10;    // Esto permite que la UI se reactive y muestre el nuevo valor sin errores previos.&#10;    fun actualizaNombre(valor: String) {&#10;        _estado.update { it.copy(nombre = valor, errores = it.errores.copy(nombre = null)) }&#10;    }&#10;&#10;    fun actualizaCorreo(valor: String) {&#10;        _estado.update { it.copy(correo = valor, errores = it.errores.copy(correo = null)) }&#10;    }&#10;&#10;    fun actualizaClave(valor: String) {&#10;        _estado.update { it.copy(clave = valor, errores = it.errores.copy(clave = null)) }&#10;    }&#10;&#10;    fun actualizaDireccion(valor: String) {&#10;        _estado.update { it.copy(direccion = valor, errores = it.errores.copy(direccion = null)) }&#10;    }&#10;&#10;    fun actualizaAceptaTerminos(valor: Boolean) {&#10;        _estado.update {&#10;            it.copy(&#10;                aceptaTerminos = valor,&#10;                errores = it.errores.copy(aceptaTerminos = null)&#10;            )&#10;        }&#10;    }&#10;    // Verifica que todos los campos del formulario cumplan con las reglas de negocio.&#10;    // Si hay errores, los guarda en el estado y retorna false.&#10;    // Si todo está correcto, retorna true.&#10;&#10;    fun validarFormulario(): Boolean {&#10;        val estadoActual = _estado.value&#10;        var valido = true&#10;        var errores = UsuarioErrores()&#10;&#10;        if (estadoActual.nombre.isBlank()) {&#10;            errores = errores.copy(nombre = &quot;El nombre es obligatorio&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.correo.isBlank() || !estadoActual.correo.contains(&quot;@&quot;)) {&#10;            errores = errores.copy(correo = &quot;Correo inválido&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.clave.length &lt; 6) {&#10;            errores = errores.copy(clave = &quot;La clave debe tener al menos 6 caracteres&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.direccion.isBlank()) {&#10;            errores = errores.copy(direccion = &quot;La dirección es obligatoria&quot;)&#10;            valido = false&#10;        }&#10;        if (!estadoActual.aceptaTerminos) {&#10;            errores = errores.copy(aceptaTerminos = &quot;Debes aceptar los términos&quot;)&#10;            valido = false&#10;        }&#10;&#10;        _estado.update { it.copy(errores = errores) }&#10;        return valido&#10;    }&#10;&#10;    // Si el formulario es válido, emite un evento de navegación para ir a la pantalla de resumen.&#10;    // Se ejecuta en el hilo principal porque afecta la UI.&#10;    fun registrarUsuario() {&#10;        viewModelScope.launch(Dispatchers.Main) {&#10;            if (validarFormulario()) {&#10;                _navigationEvents.emit(NavigationEvent.NavigateTo(route = Screen.Resumen))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.apppolera_ecommerce_grupo4.navigation.NavigationEvent&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Screen&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.UsuarioUiState&#10;import com.example.apppolera_ecommerce_grupo4.ui.state.UsuarioErrores&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;&#10;class UsuarioViewModel : ViewModel() {&#10;&#10;    // Flow que representa el estado actual del formulario de usuario.&#10;    // Incluye campos como nombre, correo, clave, dirección y aceptación de términos,&#10;    // además de posibles errores de validación por campo.&#10;    private val _estado = MutableStateFlow(UsuarioUiState())&#10;    val estado: StateFlow&lt;UsuarioUiState&gt; = _estado&#10;&#10;    // Flow que emite eventos de navegación desde el ViewModel hacia la UI.&#10;    // Se usa para indicar transiciones de pantalla, como ir al resumen tras el registro.&#10;    private val _navigationEvents = MutableSharedFlow&lt;NavigationEvent&gt;()&#10;    val navigationEvents: SharedFlow&lt;NavigationEvent&gt; = _navigationEvents.asSharedFlow()&#10;&#10;    // Cada función actualiza un campo del formulario y limpia su error asociado.&#10;    // Esto permite que la UI se reactive y muestre el nuevo valor sin errores previos.&#10;    fun actualizaNombre(valor: String) {&#10;        _estado.update { it.copy(nombre = valor, errores = it.errores.copy(nombre = null)) }&#10;    }&#10;&#10;    fun actualizaCorreo(valor: String) {&#10;        _estado.update { it.copy(correo = valor, errores = it.errores.copy(correo = null)) }&#10;    }&#10;&#10;    fun actualizaClave(valor: String) {&#10;        _estado.update { it.copy(clave = valor, errores = it.errores.copy(clave = null)) }&#10;    }&#10;&#10;    fun actualizaDireccion(valor: String) {&#10;        _estado.update { it.copy(direccion = valor, errores = it.errores.copy(direccion = null)) }&#10;    }&#10;&#10;    fun actualizaAceptaTerminos(valor: Boolean) {&#10;        _estado.update {&#10;            it.copy(&#10;                aceptaTerminos = valor,&#10;                errores = it.errores.copy(aceptaTerminos = null)&#10;            )&#10;        }&#10;    }&#10;    // Verifica que todos los campos del formulario cumplan con las reglas de negocio.&#10;    // Si hay errores, los guarda en el estado y retorna false.&#10;    // Si todo está correcto, retorna true.&#10;&#10;    fun validarFormulario(): Boolean {&#10;        val estadoActual = _estado.value&#10;        var valido = true&#10;        var errores = UsuarioErrores()&#10;&#10;        if (estadoActual.nombre.isBlank()) {&#10;            errores = errores.copy(nombre = &quot;El nombre es obligatorio&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.correo.isBlank() || !estadoActual.correo.contains(&quot;@&quot;)) {&#10;            errores = errores.copy(correo = &quot;Correo inválido&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.clave.length &lt; 6) {&#10;            errores = errores.copy(clave = &quot;La clave debe tener al menos 6 caracteres&quot;)&#10;            valido = false&#10;        }&#10;        if (estadoActual.direccion.isBlank()) {&#10;            errores = errores.copy(direccion = &quot;La dirección es obligatoria&quot;)&#10;            valido = false&#10;        }&#10;        if (!estadoActual.aceptaTerminos) {&#10;            errores = errores.copy(aceptaTerminos = &quot;Debes aceptar los términos&quot;)&#10;            valido = false&#10;        }&#10;&#10;        _estado.update { it.copy(errores = errores) }&#10;        return valido&#10;    }&#10;&#10;    // Si el formulario es válido, emite un evento de navegación para ir a la pantalla de resumen.&#10;    // Se ejecuta en el hilo principal porque afecta la UI.&#10;    fun registrarUsuario() {&#10;        viewModelScope.launch(Dispatchers.Main) {&#10;            if (validarFormulario()) {&#10;                _navigationEvents.emit(NavigationEvent.NavigateTo(route = Screen.Resumen))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val Purple80 = Color(0xFFD0BCFF)&#10;val PurpleGrey80 = Color(0xFFCCC2DC)&#10;val Pink80 = Color(0xFFEFB8C8)&#10;&#10;val Purple40 = Color(0xFF6650a4)&#10;val PurpleGrey40 = Color(0xFF625b71)&#10;val Pink40 = Color(0xFF7D5260)" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;&#13;&#10;val Purple80 = Color(0xFFD0BCFF)&#13;&#10;val PurpleGrey80 = Color(0xFFCCC2DC)&#13;&#10;val Pink80 = Color(0xFFEFB8C8)&#13;&#10;&#13;&#10;val Purple40 = Color(0xFF6650a4)&#13;&#10;val PurpleGrey40 = Color(0xFF625b71)&#13;&#10;val Pink40 = Color(0xFF7D5260)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Type.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    /* Other default text styles to override&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    */&#10;)" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.material3.Typography&#13;&#10;import androidx.compose.ui.text.TextStyle&#13;&#10;import androidx.compose.ui.text.font.FontFamily&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;&#13;&#10;// Set of Material typography styles to start with&#13;&#10;val Typography = Typography(&#13;&#10;    bodyLarge = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Normal,&#13;&#10;        fontSize = 16.sp,&#13;&#10;        lineHeight = 24.sp,&#13;&#10;        letterSpacing = 0.5.sp&#13;&#10;    )&#13;&#10;    /* Other default text styles to override&#13;&#10;    titleLarge = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Normal,&#13;&#10;        fontSize = 22.sp,&#13;&#10;        lineHeight = 28.sp,&#13;&#10;        letterSpacing = 0.sp&#13;&#10;    ),&#13;&#10;    labelSmall = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Medium,&#13;&#10;        fontSize = 11.sp,&#13;&#10;        lineHeight = 16.sp,&#13;&#10;        letterSpacing = 0.5.sp&#13;&#10;    )&#13;&#10;    */&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.AppPolera_ecommerce_Grupo4&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.AppPolera_ecommerce_Grupo4&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/apppolerca_ecommerce_grupo4/ExampleUnitTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/apppolerca_ecommerce_grupo4/ExampleUnitTest.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import org.junit.Test&#10;import org.junit.Assert.*&#10;&#10;class ExampleUnitTest {&#10;    @Test&#10;    fun addition_isCorrect() {&#10;        assertEquals(4, 2 + 2)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4&#10;&#10;import org.junit.Test&#10;import org.junit.Assert.*&#10;&#10;class ExampleUnitTest {&#10;    @Test&#10;    fun addition_isCorrect() {&#10;        assertEquals(4, 2 + 2)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;# Suprime el warning de compatibilidad de compileSdk 36 con la versión actual del AGP&#10;android.suppressUnsupportedCompileSdk=36" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;# Suprime el warning de compatibilidad de compileSdk 36 con la versión actual del AGP&#10;android.suppressUnsupportedCompileSdk=36" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.7.2&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;&#10;# Compose BOM y módulos&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-compose-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-compose-foundation = { group = &quot;androidx.compose.foundation&quot;, name = &quot;foundation&quot; }&#10;androidx-compose-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-compose-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-compose-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-compose-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-compose-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-compose-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.7.2&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;&#10;# Compose BOM y módulos&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-compose-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-compose-foundation = { group = &quot;androidx.compose.foundation&quot;, name = &quot;foundation&quot; }&#10;androidx-compose-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-compose-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-compose-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-compose-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-compose-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-compose-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;apppolera_ecommerce_grupo4&quot;&#10;include(&quot;:app&quot;)&#10;" />
              <option name="updatedContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;apppolera_ecommerce_grupo4&quot;&#10;include(&quot;:app&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>