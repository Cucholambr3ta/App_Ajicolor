<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/ui/screens/CartScreenNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/ui/screens/CartScreenNew.kt" />
              <option name="originalContent" value="package com.example.appajicolorgrupo4.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.LocalShipping&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.appajicolorgrupo4.data.ProductoCarrito&#10;import com.example.appajicolorgrupo4.ui.components.AppBackground&#10;import com.example.appajicolorgrupo4.viewmodel.CarritoViewModel&#10;import java.text.NumberFormat&#10;import java.util.Locale&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CartScreen(&#10;    navController: NavController,&#10;    carritoViewModel: CarritoViewModel = viewModel()&#10;) {&#10;    val productos by carritoViewModel.productos.collectAsState()&#10;    val subtotal = carritoViewModel.calcularSubtotal()&#10;    val costoEnvio = carritoViewModel.calcularCostoEnvio()&#10;    val total = carritoViewModel.calcularTotal()&#10;    val calificaEnvioGratis = carritoViewModel.calificaEnvioGratis()&#10;    val montoFaltante = carritoViewModel.montoFaltanteEnvioGratis()&#10;    &#10;    val formatoMoneda = remember {&#10;        NumberFormat.getCurrencyInstance(Locale(&quot;es&quot;, &quot;CL&quot;)).apply {&#10;            maximumFractionDigits = 0&#10;        }&#10;    }&#10;&#10;    AppBackground {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    title = { Text(&quot;Carrito de Compras&quot;) },&#10;                    colors = TopAppBarDefaults.topAppBarColors(&#10;                        containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;                    )&#10;                )&#10;            },&#10;            containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;        ) { paddingValues -&gt;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .padding(16.dp)&#10;            ) {&#10;                if (productos.isEmpty()) {&#10;                    // Carrito vacío&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .weight(1f),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;&quot;,&#10;                            style = MaterialTheme.typography.displayLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Tu carrito está vacío&quot;,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;¡Agrega productos para comenzar!&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Anuncio de envío gratis&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (calificaEnvioGratis)&#10;                                MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.7f)&#10;                            else&#10;                                MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.6f)&#10;                        )&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(12.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalShipping,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = if (calificaEnvioGratis)&#10;                                    MaterialTheme.colorScheme.primary&#10;                                else&#10;                                    MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                if (calificaEnvioGratis) {&#10;                                    Text(&#10;                                        text = &quot;¡Felicidades! Envío Gratis &quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Tu compra supera los ${formatoMoneda.format(20000)}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall&#10;                                    )&#10;                                } else {&#10;                                    Text(&#10;                                        text = &quot;Envío Gratis en compras sobre ${formatoMoneda.format(20000)}&quot;,&#10;                                        style = MaterialTheme.typography.titleSmall,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Te faltan ${formatoMoneda.format(montoFaltante)} para calificar&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    &#10;                    // Lista de productos&#10;                    LazyColumn(&#10;                        modifier = Modifier.weight(1f),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(productos) { producto -&gt;&#10;                            ProductoCarritoItem(&#10;                                producto = producto,&#10;                                formatoMoneda = formatoMoneda,&#10;                                onCantidadChanged = { nuevaCantidad -&gt;&#10;                                    carritoViewModel.actualizarCantidad(producto, nuevaCantidad)&#10;                                },&#10;                                onEliminar = {&#10;                                    carritoViewModel.eliminarProducto(producto)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Resumen de costos&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&quot;Subtotal:&quot;)&#10;                                Text(formatoMoneda.format(subtotal))&#10;                            }&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&quot;Envío:&quot;)&#10;                                if (calificaEnvioGratis) {&#10;                                    Text(&#10;                                        text = &quot;GRATIS&quot;,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                } else {&#10;                                    Text(formatoMoneda.format(costoEnvio))&#10;                                }&#10;                            }&#10;                            HorizontalDivider()&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Total:&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = formatoMoneda.format(total),&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Botón proceder al pago&#10;                    Button(&#10;                        onClick = { navController.navigate(&quot;checkout&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(56.dp),&#10;                        enabled = productos.isNotEmpty()&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Proceder al Pago&quot;,&#10;                            style = MaterialTheme.typography.titleMedium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProductoCarritoItem(&#10;    producto: ProductoCarrito,&#10;    formatoMoneda: NumberFormat,&#10;    onCantidadChanged: (Int) -&gt; Unit,&#10;    onEliminar: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Placeholder para imagen (color del producto)&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(80.dp)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(producto.color.color)&#10;            )&#10;&#10;            // Información del producto&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = producto.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (producto.talla != null) {&#10;                    Text(&#10;                        text = &quot;Talla: ${producto.talla.displayName}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;Color: ${producto.color.nombre}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    // Control de cantidad&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        IconButton(&#10;                            onClick = { onCantidadChanged(producto.cantidad - 1) },&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;−&quot;,&#10;                                style = MaterialTheme.typography.titleLarge&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = producto.cantidad.toString(),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.widthIn(min = 24.dp)&#10;                        )&#10;&#10;                        IconButton(&#10;                            onClick = { onCantidadChanged(producto.cantidad + 1) },&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Add,&#10;                                contentDescription = &quot;Aumentar cantidad&quot;,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Precio y botón eliminar&#10;                    Column(&#10;                        horizontalAlignment = Alignment.End&#10;                    ) {&#10;                        Text(&#10;                            text = formatoMoneda.format(producto.subtotal()),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        IconButton(&#10;                            onClick = onEliminar,&#10;                            modifier = Modifier.size(24.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Delete,&#10;                                contentDescription = &quot;Eliminar&quot;,&#10;                                tint = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.appajicolorgrupo4.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.LocalShipping&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.appajicolorgrupo4.data.ProductoCarrito&#10;import com.example.appajicolorgrupo4.ui.components.AppBackground&#10;import com.example.appajicolorgrupo4.viewmodel.CarritoViewModel&#10;import java.text.NumberFormat&#10;import java.util.Locale&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CartScreen(&#10;    navController: NavController,&#10;    carritoViewModel: CarritoViewModel = viewModel()&#10;) {&#10;    val productos by carritoViewModel.productos.collectAsState()&#10;    val subtotal = carritoViewModel.calcularSubtotal()&#10;    val costoEnvio = carritoViewModel.calcularCostoEnvio()&#10;    val total = carritoViewModel.calcularTotal()&#10;    val calificaEnvioGratis = carritoViewModel.calificaEnvioGratis()&#10;    val montoFaltante = carritoViewModel.montoFaltanteEnvioGratis()&#10;    &#10;    val formatoMoneda = remember {&#10;        NumberFormat.getCurrencyInstance(Locale(&quot;es&quot;, &quot;CL&quot;)).apply {&#10;            maximumFractionDigits = 0&#10;        }&#10;    }&#10;&#10;    AppBackground {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    title = { Text(&quot;Carrito de Compras&quot;) },&#10;                    colors = TopAppBarDefaults.topAppBarColors(&#10;                        containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;                    )&#10;                )&#10;            },&#10;            containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;        ) { paddingValues -&gt;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .padding(16.dp)&#10;            ) {&#10;                if (productos.isEmpty()) {&#10;                    // Carrito vacío&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .weight(1f),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;&quot;,&#10;                            style = MaterialTheme.typography.displayLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Tu carrito está vacío&quot;,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;¡Agrega productos para comenzar!&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Anuncio de envío gratis&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = if (calificaEnvioGratis)&#10;                                MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.7f)&#10;                            else&#10;                                MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.6f)&#10;                        )&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(12.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.displaySmall,&#10;                                modifier = Modifier.size(32.dp)&#10;                            )&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                if (calificaEnvioGratis) {&#10;                                    Text(&#10;                                        text = &quot;¡Felicidades! Envío Gratis &quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Tu compra supera los ${formatoMoneda.format(20000)}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall&#10;                                    )&#10;                                } else {&#10;                                    Text(&#10;                                        text = &quot;Envío Gratis en compras sobre ${formatoMoneda.format(20000)}&quot;,&#10;                                        style = MaterialTheme.typography.titleSmall,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Te faltan ${formatoMoneda.format(montoFaltante)} para calificar&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    &#10;                    // Lista de productos&#10;                    LazyColumn(&#10;                        modifier = Modifier.weight(1f),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(productos) { producto -&gt;&#10;                            ProductoCarritoItem(&#10;                                producto = producto,&#10;                                formatoMoneda = formatoMoneda,&#10;                                onCantidadChanged = { nuevaCantidad -&gt;&#10;                                    carritoViewModel.actualizarCantidad(producto, nuevaCantidad)&#10;                                },&#10;                                onEliminar = {&#10;                                    carritoViewModel.eliminarProducto(producto)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Resumen de costos&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&quot;Subtotal:&quot;)&#10;                                Text(formatoMoneda.format(subtotal))&#10;                            }&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&quot;Envío:&quot;)&#10;                                if (calificaEnvioGratis) {&#10;                                    Text(&#10;                                        text = &quot;GRATIS&quot;,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                } else {&#10;                                    Text(formatoMoneda.format(costoEnvio))&#10;                                }&#10;                            }&#10;                            HorizontalDivider()&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Total:&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = formatoMoneda.format(total),&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Botón proceder al pago&#10;                    Button(&#10;                        onClick = { navController.navigate(&quot;checkout&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(56.dp),&#10;                        enabled = productos.isNotEmpty()&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Proceder al Pago&quot;,&#10;                            style = MaterialTheme.typography.titleMedium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProductoCarritoItem(&#10;    producto: ProductoCarrito,&#10;    formatoMoneda: NumberFormat,&#10;    onCantidadChanged: (Int) -&gt; Unit,&#10;    onEliminar: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Placeholder para imagen (color del producto)&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(80.dp)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(producto.color.color)&#10;            )&#10;&#10;            // Información del producto&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = producto.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (producto.talla != null) {&#10;                    Text(&#10;                        text = &quot;Talla: ${producto.talla.displayName}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;Color: ${producto.color.nombre}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    // Control de cantidad&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        IconButton(&#10;                            onClick = { onCantidadChanged(producto.cantidad - 1) },&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;−&quot;,&#10;                                style = MaterialTheme.typography.titleLarge&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = producto.cantidad.toString(),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.widthIn(min = 24.dp)&#10;                        )&#10;&#10;                        IconButton(&#10;                            onClick = { onCantidadChanged(producto.cantidad + 1) },&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Add,&#10;                                contentDescription = &quot;Aumentar cantidad&quot;,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Precio y botón eliminar&#10;                    Column(&#10;                        horizontalAlignment = Alignment.End&#10;                    ) {&#10;                        Text(&#10;                            text = formatoMoneda.format(producto.subtotal()),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        IconButton(&#10;                            onClick = onEliminar,&#10;                            modifier = Modifier.size(24.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Delete,&#10;                                contentDescription = &quot;Eliminar&quot;,&#10;                                tint = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/ui/screens/CheckoutScreenNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/ui/screens/CheckoutScreenNew.kt" />
              <option name="updatedContent" value="package com.example.appajicolorgrupo4.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.appajicolorgrupo4.data.ProductoCarrito&#10;import com.example.appajicolorgrupo4.ui.components.AppBackground&#10;import com.example.appajicolorgrupo4.viewmodel.CarritoViewModel&#10;import java.text.NumberFormat&#10;import java.util.Locale&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CheckoutScreenNew(&#10;    navController: NavController,&#10;    carritoViewModel: CarritoViewModel = viewModel()&#10;) {&#10;    val productos by carritoViewModel.productos.collectAsState()&#10;    val subtotal = carritoViewModel.calcularSubtotal()&#10;    val impuestos = carritoViewModel.calcularImpuestos()&#10;    val costoEnvio = carritoViewModel.calcularCostoEnvio()&#10;    val total = carritoViewModel.calcularTotal()&#10;    val calificaEnvioGratis = carritoViewModel.calificaEnvioGratis()&#10;    &#10;    val formatoMoneda = remember {&#10;        NumberFormat.getCurrencyInstance(Locale(&quot;es&quot;, &quot;CL&quot;)).apply {&#10;            maximumFractionDigits = 0&#10;        }&#10;    }&#10;    &#10;    var direccion by remember { mutableStateOf(&quot;&quot;) }&#10;    var telefono by remember { mutableStateOf(&quot;&quot;) }&#10;    var notasAdicionales by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AppBackground {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    title = { Text(&quot;Confirmar Pedido&quot;) },&#10;                    navigationIcon = {&#10;                        IconButton(onClick = { navController.popBackStack() }) {&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                contentDescription = &quot;Volver&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    colors = TopAppBarDefaults.topAppBarColors(&#10;                        containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;                    )&#10;                )&#10;            },&#10;            containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;        ) { paddingValues -&gt;&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Resumen de productos&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Resumen del Pedido&quot;,&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            &#10;                            HorizontalDivider()&#10;                            &#10;                            productos.forEach { producto -&gt;&#10;                                ProductoResumenItem(producto, formatoMoneda)&#10;                            }&#10;                            &#10;                            HorizontalDivider()&#10;                            &#10;                            // Desglose de costos&#10;                            Column(&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween&#10;                                ) {&#10;                                    Text(&quot;Subtotal:&quot;)&#10;                                    Text(formatoMoneda.format(subtotal))&#10;                                }&#10;                                &#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween&#10;                                ) {&#10;                                    Text(&quot;Impuestos (19% IVA):&quot;)&#10;                                    Text(formatoMoneda.format(impuestos))&#10;                                }&#10;                                &#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween&#10;                                ) {&#10;                                    Text(&quot;Envío:&quot;)&#10;                                    if (calificaEnvioGratis) {&#10;                                        Text(&#10;                                            text = &quot;GRATIS&quot;,&#10;                                            fontWeight = FontWeight.Bold,&#10;                                            color = MaterialTheme.colorScheme.primary&#10;                                        )&#10;                                    } else {&#10;                                        Text(formatoMoneda.format(costoEnvio))&#10;                                    }&#10;                                }&#10;                                &#10;                                if (calificaEnvioGratis) {&#10;                                    Text(&#10;                                        text = &quot;✓ Envío gratis por compra sobre ${formatoMoneda.format(20000)}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                }&#10;                            }&#10;                            &#10;                            HorizontalDivider()&#10;                            &#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Total a Pagar:&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = formatoMoneda.format(total),&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Información de envío&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Información de Envío&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            &#10;                            OutlinedTextField(&#10;                                value = direccion,&#10;                                onValueChange = { direccion = it },&#10;                                label = { Text(&quot;Dirección de Envío *&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                minLines = 2,&#10;                                placeholder = { Text(&quot;Calle, número, distrito, ciudad&quot;) }&#10;                            )&#10;                            &#10;                            OutlinedTextField(&#10;                                value = telefono,&#10;                                onValueChange = { telefono = it },&#10;                                label = { Text(&quot;Teléfono de Contacto *&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                singleLine = true,&#10;                                placeholder = { Text(&quot;999 999 999&quot;) }&#10;                            )&#10;                            &#10;                            OutlinedTextField(&#10;                                value = notasAdicionales,&#10;                                onValueChange = { notasAdicionales = it },&#10;                                label = { Text(&quot;Notas Adicionales (Opcional)&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                minLines = 2,&#10;                                placeholder = { Text(&quot;Referencias, indicaciones especiales, etc.&quot;) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Botón continuar&#10;                item {&#10;                    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                        Button(&#10;                            onClick = { &#10;                                // Navegar a selección de método de pago&#10;                                navController.navigate(&quot;payment_methods&quot;)&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp),&#10;                            enabled = direccion.isNotBlank() &amp;&amp; telefono.isNotBlank()&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Seleccionar Método de Pago&quot;,&#10;                                style = MaterialTheme.typography.titleMedium&#10;                            )&#10;                        }&#10;                        &#10;                        if (direccion.isBlank() || telefono.isBlank()) {&#10;                            Text(&#10;                                text = &quot;* Complete todos los campos obligatorios&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier.padding(horizontal = 16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProductoResumenItem(&#10;    producto: ProductoCarrito,&#10;    formatoMoneda: NumberFormat&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Color indicator&#10;        Box(&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(RoundedCornerShape(8.dp))&#10;                .background(producto.color.color)&#10;        )&#10;        &#10;        // Info&#10;        Column(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Text(&#10;                text = producto.nombre,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = buildString {&#10;                    if (producto.talla != null) {&#10;                        append(&quot;Talla ${producto.talla.displayName} • &quot;)&#10;                    }&#10;                    append(producto.color.nombre)&#10;                    append(&quot; • Cant: ${producto.cantidad}&quot;)&#10;                },&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;        }&#10;        &#10;        // Precio&#10;        Text(&#10;            text = formatoMoneda.format(producto.subtotal()),&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/ui/screens/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/ui/screens/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.appajicolorgrupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.appajicolorgrupo4.R&#10;import com.example.appajicolorgrupo4.navigation.Screen&#10;import com.example.appajicolorgrupo4.ui.components.AppBackground&#10;import com.example.appajicolorgrupo4.ui.components.AppNavigationDrawer&#10;import com.example.appajicolorgrupo4.ui.components.BottomNavigationBar&#10;import com.example.appajicolorgrupo4.ui.components.ProfileImageSelector&#10;import com.example.appajicolorgrupo4.ui.components.TopBarWithCart&#10;import com.example.appajicolorgrupo4.viewmodel.MainViewModel&#10;import com.example.appajicolorgrupo4.viewmodel.UsuarioViewModel&#10;import com.example.appajicolorgrupo4.ui.theme.AmarilloAji&#10;import com.example.appajicolorgrupo4.ui.theme.MoradoAji&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    navController: NavController,&#10;    viewModel: MainViewModel&#10;) {&#10;    val context = LocalContext.current&#10;    val usuarioViewModel: UsuarioViewModel = viewModel()&#10;&#10;    // Cargar perfil al entrar&#10;    LaunchedEffect(Unit) {&#10;        usuarioViewModel.cargarPerfil()&#10;    }&#10;&#10;    val currentUser by usuarioViewModel.currentUser.collectAsState()&#10;    val estado by usuarioViewModel.estado.collectAsState()&#10;    val isEditMode by usuarioViewModel.isEditMode.collectAsState()&#10;    val updateResultado by usuarioViewModel.updateResultado.collectAsState()&#10;    val profileImageUri by usuarioViewModel.profileImageUri.collectAsState()&#10;&#10;    // Estado para el drawer&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Mostrar mensajes de resultado&#10;    LaunchedEffect(updateResultado) {&#10;        if (updateResultado != null) {&#10;            kotlinx.coroutines.delay(3000)&#10;            usuarioViewModel.limpiarMensajeActualizacion()&#10;        }&#10;    }&#10;&#10;&#10;    AppBackground {&#10;        AppNavigationDrawer(&#10;            navController = navController,&#10;            currentRoute = Screen.Profile.route,&#10;            drawerState = drawerState&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    TopBarWithCart(&#10;                        title = &quot;Mi Perfil&quot;,&#10;                        navController = navController,&#10;                        drawerState = drawerState,&#10;                        scope = scope&#10;                    )&#10;                },&#10;                bottomBar = {&#10;                    BottomNavigationBar(&#10;                        navController = navController,&#10;                        currentRoute = Screen.Profile.route&#10;                    )&#10;                },&#10;                containerColor = androidx.compose.ui.graphics.Color.Transparent&#10;            ) { innerPadding -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(innerPadding)&#10;                        .fillMaxSize()&#10;                        .verticalScroll(rememberScrollState())&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    if (currentUser == null) {&#10;                        Text(&#10;                            text = &quot;No hay sesión activa&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                    } else {&#10;                        // Foto de perfil con selector&#10;                        ProfileImageSelector(&#10;                            defaultImageRes = R.drawable.profile,&#10;                            onImageSelected = { uri -&gt;&#10;                                // Guardar la URI en el ViewModel para persistencia&#10;                                usuarioViewModel.guardarFotoPerfil(uri)&#10;                            },&#10;                            currentImageUri = profileImageUri&#10;                        )&#10;&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        // Texto indicativo&#10;                        Text(&#10;                            text = &quot;Toca para cambiar foto&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;&#10;                        Spacer(Modifier.height(16.dp))&#10;&#10;                        Text(&#10;                            text = &quot;Información Personal&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            color = AmarilloAji&#10;                        )&#10;&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        // Mostrar mensaje de resultado&#10;                        updateResultado?.let { mensaje -&gt;&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = if (mensaje.contains(&quot;exitosamente&quot;))&#10;                                        MaterialTheme.colorScheme.primaryContainer&#10;                                    else MaterialTheme.colorScheme.errorContainer&#10;                                )&#10;                            ) {&#10;                                Text(&#10;                                    text = mensaje,&#10;                                    modifier = Modifier.padding(12.dp),&#10;                                    color = AmarilloAji&#10;                                )&#10;                            }&#10;                            Spacer(Modifier.height(8.dp))&#10;                        }&#10;&#10;                        // Campo Nombre&#10;                        OutlinedTextField(&#10;                            value = estado.nombre,&#10;                            onValueChange = { if (isEditMode) usuarioViewModel.actualizaNombre(it) },&#10;                            label = { Text(&quot;Nombre&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = isEditMode,&#10;                            isError = estado.errores.nombre != null,&#10;                            supportingText = {&#10;                                estado.errores.nombre?.let { Text(it, color = AmarilloAji) }&#10;                            },&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = AmarilloAji,&#10;                                unfocusedBorderColor = AmarilloAji,&#10;                                disabledBorderColor = MaterialTheme.colorScheme.outline,&#10;                                focusedLabelColor = AmarilloAji,&#10;                                unfocusedLabelColor = AmarilloAji,&#10;                                cursorColor = AmarilloAji,&#10;                                focusedTextColor = MoradoAji,&#10;                                unfocusedTextColor = MoradoAji,&#10;                                disabledTextColor = MoradoAji,&#10;                                focusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                unfocusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                disabledContainerColor = Color.White.copy(alpha = 0.75f)&#10;                            )&#10;                        )&#10;&#10;                        // Campo Correo&#10;                        OutlinedTextField(&#10;                            value = estado.correo,&#10;                            onValueChange = { if (isEditMode) usuarioViewModel.actualizaCorreo(it) },&#10;                            label = { Text(&quot;Correo electrónico&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = isEditMode,&#10;                            isError = estado.errores.correo != null,&#10;                            supportingText = {&#10;                                estado.errores.correo?.let { Text(it, color = AmarilloAji) }&#10;                            },&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = AmarilloAji,&#10;                                unfocusedBorderColor = AmarilloAji,&#10;                                disabledBorderColor = MaterialTheme.colorScheme.outline,&#10;                                focusedLabelColor = AmarilloAji,&#10;                                unfocusedLabelColor = AmarilloAji,&#10;                                cursorColor = AmarilloAji,&#10;                                focusedTextColor = MoradoAji,&#10;                                unfocusedTextColor = MoradoAji,&#10;                                disabledTextColor = MoradoAji,&#10;                                focusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                unfocusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                disabledContainerColor = Color.White.copy(alpha = 0.75f)&#10;                            )&#10;                        )&#10;&#10;                        // Campo Dirección&#10;                        OutlinedTextField(&#10;                            value = estado.direccion,&#10;                            onValueChange = { if (isEditMode) usuarioViewModel.actualizaDireccion(it) },&#10;                            label = { Text(&quot;Dirección&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = isEditMode,&#10;                            isError = estado.errores.direccion != null,&#10;                            supportingText = {&#10;                                estado.errores.direccion?.let { Text(it, color = AmarilloAji) }&#10;                            },&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = AmarilloAji,&#10;                                unfocusedBorderColor = AmarilloAji,&#10;                                disabledBorderColor = MaterialTheme.colorScheme.outline,&#10;                                focusedLabelColor = AmarilloAji,&#10;                                unfocusedLabelColor = AmarilloAji,&#10;                                cursorColor = AmarilloAji,&#10;                                focusedTextColor = MoradoAji,&#10;                                unfocusedTextColor = MoradoAji,&#10;                                disabledTextColor = MoradoAji,&#10;                                focusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                unfocusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                disabledContainerColor = Color.White.copy(alpha = 0.75f)&#10;                            )&#10;                        )&#10;&#10;&#10;                        // Botones de edición&#10;                        // Botones según el modo&#10;                        if (!isEditMode) {&#10;                            // Botón Modificar&#10;                            Button(&#10;                                onClick = { usuarioViewModel.activarEdicion() },&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&quot;Modificar Datos&quot;)&#10;                            }&#10;                        } else {&#10;                            // Botones Guardar y Cancelar&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                OutlinedButton(&#10;                                    onClick = { usuarioViewModel.cancelarEdicion() },&#10;                                    modifier = Modifier.weight(1f)&#10;                                ) {&#10;                                    Text(&quot;Cancelar&quot;)&#10;                                }&#10;                                Button(&#10;                                    onClick = {&#10;                                        usuarioViewModel.guardarCambiosPerfil {&#10;                                            // Acción después de guardar exitosamente&#10;                                        }&#10;                                    },&#10;                                    modifier = Modifier.weight(1f)&#10;                                ) {&#10;                                    Text(&quot;Guardar&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Spacer(Modifier.height(24.dp))&#10;&#10;                        HorizontalDivider()&#10;&#10;                        Spacer(Modifier.height(16.dp))&#10;&#10;                        // Botón Cerrar Sesión&#10;                        Button(&#10;                            onClick = {&#10;                                usuarioViewModel.cerrarSesion()&#10;                                // Navegar a StartScreen y limpiar el backstack completo&#10;                                navController.navigate(Screen.StartScreen.route) {&#10;                                    // Limpiar todo el backstack&#10;                                    popUpTo(0) { inclusive = true }&#10;                                    launchSingleTop = true&#10;                                }&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Filled.ExitToApp,&#10;                                contentDescription = &quot;Cerrar Sesión&quot;,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Spacer(Modifier.width(8.dp))&#10;                            Text(&quot;Cerrar Sesión&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.appajicolorgrupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.appajicolorgrupo4.R&#10;import com.example.appajicolorgrupo4.navigation.Screen&#10;import com.example.appajicolorgrupo4.ui.components.AppBackground&#10;import com.example.appajicolorgrupo4.ui.components.AppNavigationDrawer&#10;import com.example.appajicolorgrupo4.ui.components.BottomNavigationBar&#10;import com.example.appajicolorgrupo4.ui.components.ProfileImageSelector&#10;import com.example.appajicolorgrupo4.ui.components.TopBarWithCart&#10;import com.example.appajicolorgrupo4.viewmodel.MainViewModel&#10;import com.example.appajicolorgrupo4.viewmodel.UsuarioViewModel&#10;import com.example.appajicolorgrupo4.ui.theme.AmarilloAji&#10;import com.example.appajicolorgrupo4.ui.theme.MoradoAji&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    navController: NavController,&#10;    viewModel: MainViewModel&#10;) {&#10;    val usuarioViewModel: UsuarioViewModel = viewModel()&#10;&#10;    // Cargar perfil al entrar&#10;    LaunchedEffect(Unit) {&#10;        usuarioViewModel.cargarPerfil()&#10;    }&#10;&#10;    val currentUser by usuarioViewModel.currentUser.collectAsState()&#10;    val estado by usuarioViewModel.estado.collectAsState()&#10;    val isEditMode by usuarioViewModel.isEditMode.collectAsState()&#10;    val updateResultado by usuarioViewModel.updateResultado.collectAsState()&#10;    val profileImageUri by usuarioViewModel.profileImageUri.collectAsState()&#10;&#10;    // Estado para el drawer&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Mostrar mensajes de resultado&#10;    LaunchedEffect(updateResultado) {&#10;        if (updateResultado != null) {&#10;            kotlinx.coroutines.delay(3000)&#10;            usuarioViewModel.limpiarMensajeActualizacion()&#10;        }&#10;    }&#10;&#10;&#10;    AppBackground {&#10;        AppNavigationDrawer(&#10;            navController = navController,&#10;            currentRoute = Screen.Profile.route,&#10;            drawerState = drawerState&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    TopBarWithCart(&#10;                        title = &quot;Mi Perfil&quot;,&#10;                        navController = navController,&#10;                        drawerState = drawerState,&#10;                        scope = scope&#10;                    )&#10;                },&#10;                bottomBar = {&#10;                    BottomNavigationBar(&#10;                        navController = navController,&#10;                        currentRoute = Screen.Profile.route&#10;                    )&#10;                },&#10;                containerColor = Color.Transparent&#10;            ) { innerPadding -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(innerPadding)&#10;                        .fillMaxSize()&#10;                        .verticalScroll(rememberScrollState())&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    if (currentUser == null) {&#10;                        Text(&#10;                            text = &quot;No hay sesión activa&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                    } else {&#10;                        // Foto de perfil con selector&#10;                        ProfileImageSelector(&#10;                            defaultImageRes = R.drawable.profile,&#10;                            onImageSelected = { uri -&gt;&#10;                                // Guardar la URI en el ViewModel para persistencia&#10;                                usuarioViewModel.guardarFotoPerfil(uri)&#10;                            },&#10;                            currentImageUri = profileImageUri&#10;                        )&#10;&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        // Texto indicativo&#10;                        Text(&#10;                            text = &quot;Toca para cambiar foto&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;&#10;                        Spacer(Modifier.height(16.dp))&#10;&#10;                        Text(&#10;                            text = &quot;Información Personal&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            color = AmarilloAji&#10;                        )&#10;&#10;                        Spacer(Modifier.height(8.dp))&#10;&#10;                        // Mostrar mensaje de resultado&#10;                        updateResultado?.let { mensaje -&gt;&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = if (mensaje.contains(&quot;exitosamente&quot;))&#10;                                        MaterialTheme.colorScheme.primaryContainer&#10;                                    else MaterialTheme.colorScheme.errorContainer&#10;                                )&#10;                            ) {&#10;                                Text(&#10;                                    text = mensaje,&#10;                                    modifier = Modifier.padding(12.dp),&#10;                                    color = AmarilloAji&#10;                                )&#10;                            }&#10;                            Spacer(Modifier.height(8.dp))&#10;                        }&#10;&#10;                        // Campo Nombre&#10;                        OutlinedTextField(&#10;                            value = estado.nombre,&#10;                            onValueChange = { if (isEditMode) usuarioViewModel.actualizaNombre(it) },&#10;                            label = { Text(&quot;Nombre&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = isEditMode,&#10;                            isError = estado.errores.nombre != null,&#10;                            supportingText = {&#10;                                estado.errores.nombre?.let { Text(it, color = AmarilloAji) }&#10;                            },&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = AmarilloAji,&#10;                                unfocusedBorderColor = AmarilloAji,&#10;                                disabledBorderColor = MaterialTheme.colorScheme.outline,&#10;                                focusedLabelColor = AmarilloAji,&#10;                                unfocusedLabelColor = AmarilloAji,&#10;                                cursorColor = AmarilloAji,&#10;                                focusedTextColor = MoradoAji,&#10;                                unfocusedTextColor = MoradoAji,&#10;                                disabledTextColor = MoradoAji,&#10;                                focusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                unfocusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                disabledContainerColor = Color.White.copy(alpha = 0.75f)&#10;                            )&#10;                        )&#10;&#10;                        // Campo Correo&#10;                        OutlinedTextField(&#10;                            value = estado.correo,&#10;                            onValueChange = { if (isEditMode) usuarioViewModel.actualizaCorreo(it) },&#10;                            label = { Text(&quot;Correo electrónico&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = isEditMode,&#10;                            isError = estado.errores.correo != null,&#10;                            supportingText = {&#10;                                estado.errores.correo?.let { Text(it, color = AmarilloAji) }&#10;                            },&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = AmarilloAji,&#10;                                unfocusedBorderColor = AmarilloAji,&#10;                                disabledBorderColor = MaterialTheme.colorScheme.outline,&#10;                                focusedLabelColor = AmarilloAji,&#10;                                unfocusedLabelColor = AmarilloAji,&#10;                                cursorColor = AmarilloAji,&#10;                                focusedTextColor = MoradoAji,&#10;                                unfocusedTextColor = MoradoAji,&#10;                                disabledTextColor = MoradoAji,&#10;                                focusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                unfocusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                disabledContainerColor = Color.White.copy(alpha = 0.75f)&#10;                            )&#10;                        )&#10;&#10;                        // Campo Dirección&#10;                        OutlinedTextField(&#10;                            value = estado.direccion,&#10;                            onValueChange = { if (isEditMode) usuarioViewModel.actualizaDireccion(it) },&#10;                            label = { Text(&quot;Dirección&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = isEditMode,&#10;                            isError = estado.errores.direccion != null,&#10;                            supportingText = {&#10;                                estado.errores.direccion?.let { Text(it, color = AmarilloAji) }&#10;                            },&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = AmarilloAji,&#10;                                unfocusedBorderColor = AmarilloAji,&#10;                                disabledBorderColor = MaterialTheme.colorScheme.outline,&#10;                                focusedLabelColor = AmarilloAji,&#10;                                unfocusedLabelColor = AmarilloAji,&#10;                                cursorColor = AmarilloAji,&#10;                                focusedTextColor = MoradoAji,&#10;                                unfocusedTextColor = MoradoAji,&#10;                                disabledTextColor = MoradoAji,&#10;                                focusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                unfocusedContainerColor = Color.White.copy(alpha = 0.75f),&#10;                                disabledContainerColor = Color.White.copy(alpha = 0.75f)&#10;                            )&#10;                        )&#10;&#10;&#10;                        // Botones de edición&#10;                        // Botones según el modo&#10;                        if (!isEditMode) {&#10;                            // Botón Modificar&#10;                            Button(&#10;                                onClick = { usuarioViewModel.activarEdicion() },&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&quot;Modificar Datos&quot;)&#10;                            }&#10;                        } else {&#10;                            // Botones Guardar y Cancelar&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                OutlinedButton(&#10;                                    onClick = { usuarioViewModel.cancelarEdicion() },&#10;                                    modifier = Modifier.weight(1f)&#10;                                ) {&#10;                                    Text(&quot;Cancelar&quot;)&#10;                                }&#10;                                Button(&#10;                                    onClick = {&#10;                                        usuarioViewModel.guardarCambiosPerfil {&#10;                                            // Acción después de guardar exitosamente&#10;                                        }&#10;                                    },&#10;                                    modifier = Modifier.weight(1f)&#10;                                ) {&#10;                                    Text(&quot;Guardar&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Spacer(Modifier.height(24.dp))&#10;&#10;                        HorizontalDivider()&#10;&#10;                        Spacer(Modifier.height(16.dp))&#10;&#10;                        // Botón Cerrar Sesión&#10;                        Button(&#10;                            onClick = {&#10;                                usuarioViewModel.cerrarSesion()&#10;                                // Navegar a StartScreen y limpiar el backstack completo&#10;                                navController.navigate(Screen.StartScreen.route) {&#10;                                    // Limpiar todo el backstack&#10;                                    popUpTo(0) { inclusive = true }&#10;                                    launchSingleTop = true&#10;                                }&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                                contentDescription = &quot;Cerrar Sesión&quot;,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Spacer(Modifier.width(8.dp))&#10;                            Text(&quot;Cerrar Sesión&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/viewmodel/LoginViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/viewmodel/LoginViewModel.kt" />
              <option name="originalContent" value="package com.example.appajicolorgrupo4.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.appajicolorgrupo4.data.local.database.AppDatabase&#10;import com.example.appajicolorgrupo4.data.repository.UserRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.update&#10;import kotlinx.coroutines.launch&#10;&#10;data class LoginUiState(&#10;    val correo: String = &quot;&quot;,&#10;    val clave: String = &quot;&quot;,&#10;    val correoError: String? = null,&#10;    val claveError: String? = null,&#10;    val isLoading: Boolean = false,&#10;    val loginError: String? = null,&#10;    val loginExitoso: Boolean = false&#10;)&#10;&#10;class LoginViewModel(application: Application) : AndroidViewModel(application) {&#10;&#10;    // Repositorio&#10;    private val repository: UserRepository&#10;&#10;    init {&#10;        val database = AppDatabase.getInstance(application)&#10;        repository = UserRepository(database.userDao())&#10;    }&#10;&#10;    // Estado del login&#10;    private val _estado = MutableStateFlow(LoginUiState())&#10;    val estado: StateFlow&lt;LoginUiState&gt; = _estado&#10;&#10;    // Actualizar correo&#10;    fun actualizaCorreo(valor: String) {&#10;        _estado.update {&#10;            it.copy(&#10;                correo = valor,&#10;                correoError = null,&#10;                loginError = null&#10;            )&#10;        }&#10;    }&#10;&#10;    // Actualizar clave&#10;    fun actualizaClave(valor: String) {&#10;        _estado.update {&#10;            it.copy(&#10;                clave = valor,&#10;                claveError = null,&#10;                loginError = null&#10;            )&#10;        }&#10;    }&#10;&#10;    // Validar campos&#10;    private fun validarCampos(): Boolean {&#10;        val estadoActual = _estado.value&#10;        var valido = true&#10;        var correoError: String? = null&#10;        var claveError: String? = null&#10;&#10;        if (estadoActual.correo.isBlank()) {&#10;            correoError = &quot;El correo es obligatorio&quot;&#10;            valido = false&#10;        } else if (!estadoActual.correo.contains(&quot;@&quot;)) {&#10;            correoError = &quot;Correo inválido&quot;&#10;            valido = false&#10;        }&#10;&#10;        if (estadoActual.clave.isBlank()) {&#10;            claveError = &quot;La contraseña es obligatoria&quot;&#10;            valido = false&#10;        }&#10;&#10;        _estado.update {&#10;            it.copy(&#10;                correoError = correoError,&#10;                claveError = claveError&#10;            )&#10;        }&#10;&#10;        return valido&#10;    }&#10;&#10;    // Iniciar sesión&#10;    fun iniciarSesion(onSuccess: () -&gt; Unit) {&#10;        if (!validarCampos()) {&#10;            return&#10;        }&#10;&#10;        val estadoActual = _estado.value&#10;        _estado.update { it.copy(isLoading = true, loginError = null) }&#10;&#10;        viewModelScope.launch {&#10;            val resultado = repository.login(&#10;                correo = estadoActual.correo,&#10;                clave = estadoActual.clave&#10;            )&#10;&#10;            resultado.onSuccess { user -&gt;&#10;                _estado.update {&#10;                    it.copy(&#10;                        isLoading = false,&#10;                        loginExitoso = true,&#10;                        loginError = null&#10;                    )&#10;                }&#10;                onSuccess()&#10;            }.onFailure { error -&gt;&#10;                _estado.update {&#10;                    it.copy(&#10;                        isLoading = false,&#10;                        loginExitoso = false,&#10;                        loginError = error.message ?: &quot;Error al iniciar sesión&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Limpiar errores&#10;    fun limpiarErrores() {&#10;        _estado.update {&#10;            it.copy(&#10;                correoError = null,&#10;                claveError = null,&#10;                loginError = null&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="/*&#10; * ARCHIVO OBSOLETO - Reemplazado por AuthViewModel.kt&#10; * &#10; * Este archivo debe ser eliminado manualmente del proyecto.&#10; * AuthViewModel ahora maneja tanto Login como Registro de forma unificada.&#10; * &#10; * Para eliminar:&#10; * 1. Click derecho en este archivo en el explorador de proyectos&#10; * 2. Seleccionar &quot;Delete&quot;&#10; * 3. Confirmar la eliminación&#10; */&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/viewmodel/LoginViewModel_OBSOLETE.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/appajicolorgrupo4/viewmodel/LoginViewModel_OBSOLETE.txt" />
              <option name="updatedContent" value="/*&#10; * ARCHIVO OBSOLETO - Reemplazado por AuthViewModel.kt&#10; * &#10; * Este archivo debe ser eliminado manualmente del proyecto.&#10; * AuthViewModel ahora maneja tanto Login como Registro de forma unificada.&#10; * &#10; * Para eliminar este archivo:&#10; * 1. Click derecho sobre LoginViewModel.kt en el explorador de proyectos&#10; * 2. Seleccionar &quot;Delete&quot;&#10; * 3. Confirmar la eliminación&#10; * &#10; * AuthViewModel proporciona todas las funcionalidades necesarias para:&#10; * - Login (autenticación de usuarios)&#10; * - Registro (creación de nuevos usuarios)&#10; * - Validación de formularios&#10; * - Manejo de estados de UI&#10; */&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResgitroScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/screens/ResgitroScreen.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Campo Nombre&#10;        OutlinedTextField(&#10;            value = estado.nombre,&#10;            onValueChange = viewModel::actualizaNombre,&#10;            label = { Text(&quot;Nombre&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.nombre != null,&#10;            supportingText = { estado.errores.nombre?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Correo&#10;        OutlinedTextField(&#10;            value = estado.correo,&#10;            onValueChange = viewModel::actualizaCorreo,&#10;            label = { Text(&quot;Correo electrónico&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.correo != null,&#10;            supportingText = { estado.errores.correo?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Clave&#10;        OutlinedTextField(&#10;            value = estado.clave,&#10;            onValueChange = viewModel::actualizaClave,&#10;            label = { Text(&quot;Clave&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            isError = estado.errores.clave != null,&#10;            supportingText = { estado.errores.clave?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Dirección&#10;        OutlinedTextField(&#10;            value = estado.direccion,&#10;            onValueChange = viewModel::actualizaDireccion,&#10;            label = { Text(&quot;Dirección&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.direccion != null,&#10;            supportingText = { estado.errores.direccion?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Checkbox términos&#10;        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {&#10;            Checkbox(&#10;                checked = estado.aceptaTerminos,&#10;                onCheckedChange = viewModel::actualizaAceptaTerminos&#10;            )&#10;            Text(&quot;Acepto los términos y condiciones&quot;)&#10;        }&#10;        if (estado.errores.aceptaTerminos != null) {&#10;            Text(estado.errores.aceptaTerminos!!, color = Color.Red)&#10;        }&#10;&#10;        // Botón registrar&#10;        Button(&#10;            onClick = {&#10;                if (viewModel.validarFormulario()) {&#10;                    navController.navigate(Routes.RESUMEN)&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Registrarse&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apppolera_ecommerce_grupo4.viewmodel.UsuarioViewModel&#10;import com.example.apppolera_ecommerce_grupo4.navigation.Routes&#10;&#10;@Composable&#10;fun RegistroScreen(&#10;    navController: NavController,&#10;    viewModel: UsuarioViewModel&#10;) {&#10;    val estado by viewModel.estado.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Campo Nombre&#10;        OutlinedTextField(&#10;            value = estado.nombre,&#10;            onValueChange = viewModel::actualizaNombre,&#10;            label = { Text(&quot;Nombre&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.nombre != null,&#10;            supportingText = { estado.errores.nombre?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Correo&#10;        OutlinedTextField(&#10;            value = estado.correo,&#10;            onValueChange = viewModel::actualizaCorreo,&#10;            label = { Text(&quot;Correo electrónico&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.correo != null,&#10;            supportingText = { estado.errores.correo?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Clave&#10;        OutlinedTextField(&#10;            value = estado.clave,&#10;            onValueChange = viewModel::actualizaClave,&#10;            label = { Text(&quot;Clave&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            isError = estado.errores.clave != null,&#10;            supportingText = { estado.errores.clave?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Campo Dirección&#10;        OutlinedTextField(&#10;            value = estado.direccion,&#10;            onValueChange = viewModel::actualizaDireccion,&#10;            label = { Text(&quot;Dirección&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            isError = estado.errores.direccion != null,&#10;            supportingText = { estado.errores.direccion?.let { Text(it, color = Color.Red) } }&#10;        )&#10;&#10;        // Checkbox términos&#10;        Row(verticalAlignment = androidx.compose.ui.Alignment.CenterVertically) {&#10;            Checkbox(&#10;                checked = estado.aceptaTerminos,&#10;                onCheckedChange = viewModel::actualizaAceptaTerminos&#10;            )&#10;            Text(&quot;Acepto los términos y condiciones&quot;)&#10;        }&#10;        if (estado.errores.aceptaTerminos != null) {&#10;            Text(estado.errores.aceptaTerminos!!, color = Color.Red)&#10;        }&#10;&#10;        // Botón registrar&#10;        Button(&#10;            onClick = {&#10;                if (viewModel.validarFormulario()) {&#10;                    navController.navigate(Routes.RESUMEN)&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Registrarse&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolera_ecommerce_grupo4/ui/theme.kt" />
              <option name="originalContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Wrapper de compatibilidad: usa el nombre correcto del tema.&#10;@Deprecated(&quot;Usa AppPolera_ecommerce_Grupo4Theme en su lugar&quot;)&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(content: @Composable () -&gt; Unit) {&#10;    AppPolera_ecommerce_Grupo4Theme(content = content)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apppolera_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;// Wrapper de compatibilidad: usa el nombre correcto del tema.&#10;@Deprecated(&quot;Usa AppPolera_ecommerce_Grupo4Theme en su lugar&quot;)&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(content: @Composable () -&gt; Unit) {&#10;    AppPolera_ecommerce_Grupo4Theme(content = content)&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val Purple80 = Color(0xFFD0BCFF)&#10;val PurpleGrey80 = Color(0xFFCCC2DC)&#10;val Pink80 = Color(0xFFEFB8C8)&#10;&#10;val Purple40 = Color(0xFF6650a4)&#10;val PurpleGrey40 = Color(0xFF625b71)&#10;val Pink40 = Color(0xFF7D5260)" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;&#13;&#10;val Purple80 = Color(0xFFD0BCFF)&#13;&#10;val PurpleGrey80 = Color(0xFFCCC2DC)&#13;&#10;val Pink80 = Color(0xFFEFB8C8)&#13;&#10;&#13;&#10;val Purple40 = Color(0xFF6650a4)&#13;&#10;val PurpleGrey40 = Color(0xFF625b71)&#13;&#10;val Pink40 = Color(0xFF7D5260)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun AppPolerca_ecommerce_Grupo4Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apppolerca_ecommerce_grupo4/ui/theme/Type.kt" />
              <option name="originalContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    /* Other default text styles to override&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    */&#10;)" />
              <option name="updatedContent" value="package com.example.apppolerca_ecommerce_grupo4.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.material3.Typography&#13;&#10;import androidx.compose.ui.text.TextStyle&#13;&#10;import androidx.compose.ui.text.font.FontFamily&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;&#13;&#10;// Set of Material typography styles to start with&#13;&#10;val Typography = Typography(&#13;&#10;    bodyLarge = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Normal,&#13;&#10;        fontSize = 16.sp,&#13;&#10;        lineHeight = 24.sp,&#13;&#10;        letterSpacing = 0.5.sp&#13;&#10;    )&#13;&#10;    /* Other default text styles to override&#13;&#10;    titleLarge = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Normal,&#13;&#10;        fontSize = 22.sp,&#13;&#10;        lineHeight = 28.sp,&#13;&#10;        letterSpacing = 0.sp&#13;&#10;    ),&#13;&#10;    labelSmall = TextStyle(&#13;&#10;        fontFamily = FontFamily.Default,&#13;&#10;        fontWeight = FontWeight.Medium,&#13;&#10;        fontSize = 11.sp,&#13;&#10;        lineHeight = 16.sp,&#13;&#10;        letterSpacing = 0.5.sp&#13;&#10;    )&#13;&#10;    */&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>